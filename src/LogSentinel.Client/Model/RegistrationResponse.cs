/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// RegistrationResponse
    /// </summary>
    [DataContract]
    public partial class RegistrationResponse :  IEquatable<RegistrationResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationResponse" /> class.
        /// </summary>
        /// <param name="defaultApplicationId">defaultApplicationId.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="secret">secret.</param>
        /// <param name="userId">userId.</param>
        public RegistrationResponse(Guid? defaultApplicationId = default(Guid?), Guid? organizationId = default(Guid?), string secret = default(string), Guid? userId = default(Guid?))
        {
            this.DefaultApplicationId = defaultApplicationId;
            this.OrganizationId = organizationId;
            this.Secret = secret;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets DefaultApplicationId
        /// </summary>
        [DataMember(Name="defaultApplicationId", EmitDefaultValue=false)]
        public Guid? DefaultApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationResponse {\n");
            sb.Append("  DefaultApplicationId: ").Append(DefaultApplicationId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationResponse);
        }

        /// <summary>
        /// Returns true if RegistrationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultApplicationId == input.DefaultApplicationId ||
                    (this.DefaultApplicationId != null &&
                    this.DefaultApplicationId.Equals(input.DefaultApplicationId))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultApplicationId != null)
                    hashCode = hashCode * 59 + this.DefaultApplicationId.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }
    }

}
