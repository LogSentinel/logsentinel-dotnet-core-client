/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// WebAsyncTaskOfTreeHead
    /// </summary>
    [DataContract]
    public partial class WebAsyncTaskOfTreeHead :  IEquatable<WebAsyncTaskOfTreeHead>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebAsyncTaskOfTreeHead" /> class.
        /// </summary>
        /// <param name="callable">callable.</param>
        /// <param name="executor">executor.</param>
        /// <param name="timeout">timeout.</param>
        public WebAsyncTaskOfTreeHead(CallableOfobject callable = default(CallableOfobject), AsyncTaskExecutor executor = default(AsyncTaskExecutor), long? timeout = default(long?))
        {
            this.Callable = callable;
            this.Executor = executor;
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Gets or Sets Callable
        /// </summary>
        [DataMember(Name="callable", EmitDefaultValue=false)]
        public CallableOfobject Callable { get; set; }

        /// <summary>
        /// Gets or Sets Executor
        /// </summary>
        [DataMember(Name="executor", EmitDefaultValue=false)]
        public AsyncTaskExecutor Executor { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public long? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebAsyncTaskOfTreeHead {\n");
            sb.Append("  Callable: ").Append(Callable).Append("\n");
            sb.Append("  Executor: ").Append(Executor).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebAsyncTaskOfTreeHead);
        }

        /// <summary>
        /// Returns true if WebAsyncTaskOfTreeHead instances are equal
        /// </summary>
        /// <param name="input">Instance of WebAsyncTaskOfTreeHead to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebAsyncTaskOfTreeHead input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Callable == input.Callable ||
                    (this.Callable != null &&
                    this.Callable.Equals(input.Callable))
                ) && 
                (
                    this.Executor == input.Executor ||
                    (this.Executor != null &&
                    this.Executor.Equals(input.Executor))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Callable != null)
                    hashCode = hashCode * 59 + this.Callable.GetHashCode();
                if (this.Executor != null)
                    hashCode = hashCode * 59 + this.Executor.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }
    }

}
