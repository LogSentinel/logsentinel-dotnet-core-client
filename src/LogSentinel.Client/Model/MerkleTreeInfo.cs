/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// MerkleTreeInfo
    /// </summary>
    [DataContract]
    public partial class MerkleTreeInfo :  IEquatable<MerkleTreeInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleTreeInfo" /> class.
        /// </summary>
        /// <param name="hashAlgorithmOid">hashAlgorithmOid.</param>
        /// <param name="leafHashAlgorithmOid">leafHashAlgorithmOid.</param>
        /// <param name="timestampAlgorithmOid">timestampAlgorithmOid.</param>
        /// <param name="timestampPublicKey">timestampPublicKey.</param>
        public MerkleTreeInfo(string hashAlgorithmOid = default(string), string leafHashAlgorithmOid = default(string), string timestampAlgorithmOid = default(string), string timestampPublicKey = default(string))
        {
            this.HashAlgorithmOid = hashAlgorithmOid;
            this.LeafHashAlgorithmOid = leafHashAlgorithmOid;
            this.TimestampAlgorithmOid = timestampAlgorithmOid;
            this.TimestampPublicKey = timestampPublicKey;
        }
        
        /// <summary>
        /// Gets or Sets HashAlgorithmOid
        /// </summary>
        [DataMember(Name="hashAlgorithmOid", EmitDefaultValue=false)]
        public string HashAlgorithmOid { get; set; }

        /// <summary>
        /// Gets or Sets LeafHashAlgorithmOid
        /// </summary>
        [DataMember(Name="leafHashAlgorithmOid", EmitDefaultValue=false)]
        public string LeafHashAlgorithmOid { get; set; }

        /// <summary>
        /// Gets or Sets TimestampAlgorithmOid
        /// </summary>
        [DataMember(Name="timestampAlgorithmOid", EmitDefaultValue=false)]
        public string TimestampAlgorithmOid { get; set; }

        /// <summary>
        /// Gets or Sets TimestampPublicKey
        /// </summary>
        [DataMember(Name="timestampPublicKey", EmitDefaultValue=false)]
        public string TimestampPublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerkleTreeInfo {\n");
            sb.Append("  HashAlgorithmOid: ").Append(HashAlgorithmOid).Append("\n");
            sb.Append("  LeafHashAlgorithmOid: ").Append(LeafHashAlgorithmOid).Append("\n");
            sb.Append("  TimestampAlgorithmOid: ").Append(TimestampAlgorithmOid).Append("\n");
            sb.Append("  TimestampPublicKey: ").Append(TimestampPublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerkleTreeInfo);
        }

        /// <summary>
        /// Returns true if MerkleTreeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MerkleTreeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerkleTreeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HashAlgorithmOid == input.HashAlgorithmOid ||
                    (this.HashAlgorithmOid != null &&
                    this.HashAlgorithmOid.Equals(input.HashAlgorithmOid))
                ) && 
                (
                    this.LeafHashAlgorithmOid == input.LeafHashAlgorithmOid ||
                    (this.LeafHashAlgorithmOid != null &&
                    this.LeafHashAlgorithmOid.Equals(input.LeafHashAlgorithmOid))
                ) && 
                (
                    this.TimestampAlgorithmOid == input.TimestampAlgorithmOid ||
                    (this.TimestampAlgorithmOid != null &&
                    this.TimestampAlgorithmOid.Equals(input.TimestampAlgorithmOid))
                ) && 
                (
                    this.TimestampPublicKey == input.TimestampPublicKey ||
                    (this.TimestampPublicKey != null &&
                    this.TimestampPublicKey.Equals(input.TimestampPublicKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HashAlgorithmOid != null)
                    hashCode = hashCode * 59 + this.HashAlgorithmOid.GetHashCode();
                if (this.LeafHashAlgorithmOid != null)
                    hashCode = hashCode * 59 + this.LeafHashAlgorithmOid.GetHashCode();
                if (this.TimestampAlgorithmOid != null)
                    hashCode = hashCode * 59 + this.TimestampAlgorithmOid.GetHashCode();
                if (this.TimestampPublicKey != null)
                    hashCode = hashCode * 59 + this.TimestampPublicKey.GetHashCode();
                return hashCode;
            }
        }
    }

}
