/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// ResolvedVerificationFailure
    /// </summary>
    [DataContract]
    public partial class ResolvedVerificationFailure :  IEquatable<ResolvedVerificationFailure>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolvedVerificationFailure" /> class.
        /// </summary>
        /// <param name="created">created.</param>
        /// <param name="id">id.</param>
        /// <param name="reason">reason.</param>
        /// <param name="resolvingUserId">resolvingUserId.</param>
        /// <param name="verificationId">verificationId.</param>
        public ResolvedVerificationFailure(DateTime? created = default(DateTime?), Guid? id = default(Guid?), string reason = default(string), Guid? resolvingUserId = default(Guid?), Guid? verificationId = default(Guid?))
        {
            this.Created = created;
            this.Id = id;
            this.Reason = reason;
            this.ResolvingUserId = resolvingUserId;
            this.VerificationId = verificationId;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets ResolvingUserId
        /// </summary>
        [DataMember(Name="resolvingUserId", EmitDefaultValue=false)]
        public Guid? ResolvingUserId { get; set; }

        /// <summary>
        /// Gets or Sets VerificationId
        /// </summary>
        [DataMember(Name="verificationId", EmitDefaultValue=false)]
        public Guid? VerificationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResolvedVerificationFailure {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ResolvingUserId: ").Append(ResolvingUserId).Append("\n");
            sb.Append("  VerificationId: ").Append(VerificationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResolvedVerificationFailure);
        }

        /// <summary>
        /// Returns true if ResolvedVerificationFailure instances are equal
        /// </summary>
        /// <param name="input">Instance of ResolvedVerificationFailure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResolvedVerificationFailure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ResolvingUserId == input.ResolvingUserId ||
                    (this.ResolvingUserId != null &&
                    this.ResolvingUserId.Equals(input.ResolvingUserId))
                ) && 
                (
                    this.VerificationId == input.VerificationId ||
                    (this.VerificationId != null &&
                    this.VerificationId.Equals(input.VerificationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ResolvingUserId != null)
                    hashCode = hashCode * 59 + this.ResolvingUserId.GetHashCode();
                if (this.VerificationId != null)
                    hashCode = hashCode * 59 + this.VerificationId.GetHashCode();
                return hashCode;
            }
        }
    }

}
