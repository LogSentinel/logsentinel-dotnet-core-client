/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// Application
    /// </summary>
    [DataContract]
    public partial class Application :  IEquatable<Application>, IValidatableObject
    {
        /// <summary>
        /// Defines WarnLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WarnLevelEnum
        {
            
            /// <summary>
            /// Enum TRACE for value: TRACE
            /// </summary>
            [EnumMember(Value = "TRACE")]
            TRACE = 1,
            
            /// <summary>
            /// Enum DEBUG for value: DEBUG
            /// </summary>
            [EnumMember(Value = "DEBUG")]
            DEBUG = 2,
            
            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            [EnumMember(Value = "INFO")]
            INFO = 3,
            
            /// <summary>
            /// Enum WARN for value: WARN
            /// </summary>
            [EnumMember(Value = "WARN")]
            WARN = 4,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 5,
            
            /// <summary>
            /// Enum CRITICAL for value: CRITICAL
            /// </summary>
            [EnumMember(Value = "CRITICAL")]
            CRITICAL = 6,
            
            /// <summary>
            /// Enum FATAL for value: FATAL
            /// </summary>
            [EnumMember(Value = "FATAL")]
            FATAL = 7
        }

        /// <summary>
        /// Gets or Sets WarnLevel
        /// </summary>
        [DataMember(Name="warnLevel", EmitDefaultValue=false)]
        public WarnLevelEnum? WarnLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        /// <param name="containsPersonalData">containsPersonalData.</param>
        /// <param name="created">created.</param>
        /// <param name="detailsTransformationScript">detailsTransformationScript.</param>
        /// <param name="displayedDetailsFields">displayedDetailsFields.</param>
        /// <param name="genesisEntryId">genesisEntryId.</param>
        /// <param name="id">id.</param>
        /// <param name="ipWhiteList">ipWhiteList.</param>
        /// <param name="latestEthereumTxHash">latestEthereumTxHash.</param>
        /// <param name="latestGlacierArchiveId">latestGlacierArchiveId.</param>
        /// <param name="latestHashRecipientEmails">latestHashRecipientEmails.</param>
        /// <param name="logLevelErrorReportRecipientEmails">logLevelErrorReportRecipientEmails.</param>
        /// <param name="logLevelRegexes">logLevelRegexes.</param>
        /// <param name="machineLearningSettings">machineLearningSettings.</param>
        /// <param name="merkleTreeGenerationMinutes">merkleTreeGenerationMinutes.</param>
        /// <param name="metadataExtractionPaths">metadataExtractionPaths.</param>
        /// <param name="missingLogsAlertId">missingLogsAlertId.</param>
        /// <param name="name">name.</param>
        /// <param name="openDataAnonymizationRegexes">openDataAnonymizationRegexes.</param>
        /// <param name="openDataAnonymizeBodyFields">openDataAnonymizeBodyFields.</param>
        /// <param name="openDataEnabled">openDataEnabled.</param>
        /// <param name="openDataWhitelistRegexes">openDataWhitelistRegexes.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="partialVerificationPeriodMinutes">partialVerificationPeriodMinutes.</param>
        /// <param name="performVerification">performVerification.</param>
        /// <param name="retentionMonths">retentionMonths.</param>
        /// <param name="signatureVerificationPublicKeys">signatureVerificationPublicKeys.</param>
        /// <param name="storeHashesInEthereum">storeHashesInEthereum.</param>
        /// <param name="syslogId">syslogId.</param>
        /// <param name="updated">updated.</param>
        /// <param name="verificationFailureReportRecipientEmails">verificationFailureReportRecipientEmails.</param>
        /// <param name="verificationPeriodMinutes">verificationPeriodMinutes.</param>
        /// <param name="warnLevel">warnLevel.</param>
        public Application(bool? containsPersonalData = default(bool?), DateTime? created = default(DateTime?), string detailsTransformationScript = default(string), string displayedDetailsFields = default(string), Guid? genesisEntryId = default(Guid?), Guid? id = default(Guid?), List<string> ipWhiteList = default(List<string>), string latestEthereumTxHash = default(string), string latestGlacierArchiveId = default(string), List<string> latestHashRecipientEmails = default(List<string>), List<string> logLevelErrorReportRecipientEmails = default(List<string>), Dictionary<string, string> logLevelRegexes = default(Dictionary<string, string>), MachineLearningSettings machineLearningSettings = default(MachineLearningSettings), int? merkleTreeGenerationMinutes = default(int?), MetadataExtractionPaths metadataExtractionPaths = default(MetadataExtractionPaths), Guid? missingLogsAlertId = default(Guid?), string name = default(string), List<string> openDataAnonymizationRegexes = default(List<string>), List<string> openDataAnonymizeBodyFields = default(List<string>), bool? openDataEnabled = default(bool?), List<string> openDataWhitelistRegexes = default(List<string>), Guid? organizationId = default(Guid?), int? partialVerificationPeriodMinutes = default(int?), bool? performVerification = default(bool?), int? retentionMonths = default(int?), List<string> signatureVerificationPublicKeys = default(List<string>), bool? storeHashesInEthereum = default(bool?), string syslogId = default(string), DateTime? updated = default(DateTime?), List<string> verificationFailureReportRecipientEmails = default(List<string>), int? verificationPeriodMinutes = default(int?), WarnLevelEnum? warnLevel = default(WarnLevelEnum?))
        {
            this.ContainsPersonalData = containsPersonalData;
            this.Created = created;
            this.DetailsTransformationScript = detailsTransformationScript;
            this.DisplayedDetailsFields = displayedDetailsFields;
            this.GenesisEntryId = genesisEntryId;
            this.Id = id;
            this.IpWhiteList = ipWhiteList;
            this.LatestEthereumTxHash = latestEthereumTxHash;
            this.LatestGlacierArchiveId = latestGlacierArchiveId;
            this.LatestHashRecipientEmails = latestHashRecipientEmails;
            this.LogLevelErrorReportRecipientEmails = logLevelErrorReportRecipientEmails;
            this.LogLevelRegexes = logLevelRegexes;
            this.MachineLearningSettings = machineLearningSettings;
            this.MerkleTreeGenerationMinutes = merkleTreeGenerationMinutes;
            this.MetadataExtractionPaths = metadataExtractionPaths;
            this.MissingLogsAlertId = missingLogsAlertId;
            this.Name = name;
            this.OpenDataAnonymizationRegexes = openDataAnonymizationRegexes;
            this.OpenDataAnonymizeBodyFields = openDataAnonymizeBodyFields;
            this.OpenDataEnabled = openDataEnabled;
            this.OpenDataWhitelistRegexes = openDataWhitelistRegexes;
            this.OrganizationId = organizationId;
            this.PartialVerificationPeriodMinutes = partialVerificationPeriodMinutes;
            this.PerformVerification = performVerification;
            this.RetentionMonths = retentionMonths;
            this.SignatureVerificationPublicKeys = signatureVerificationPublicKeys;
            this.StoreHashesInEthereum = storeHashesInEthereum;
            this.SyslogId = syslogId;
            this.Updated = updated;
            this.VerificationFailureReportRecipientEmails = verificationFailureReportRecipientEmails;
            this.VerificationPeriodMinutes = verificationPeriodMinutes;
            this.WarnLevel = warnLevel;
        }
        
        /// <summary>
        /// Gets or Sets ContainsPersonalData
        /// </summary>
        [DataMember(Name="containsPersonalData", EmitDefaultValue=false)]
        public bool? ContainsPersonalData { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets DetailsTransformationScript
        /// </summary>
        [DataMember(Name="detailsTransformationScript", EmitDefaultValue=false)]
        public string DetailsTransformationScript { get; set; }

        /// <summary>
        /// Gets or Sets DisplayedDetailsFields
        /// </summary>
        [DataMember(Name="displayedDetailsFields", EmitDefaultValue=false)]
        public string DisplayedDetailsFields { get; set; }

        /// <summary>
        /// Gets or Sets GenesisEntryId
        /// </summary>
        [DataMember(Name="genesisEntryId", EmitDefaultValue=false)]
        public Guid? GenesisEntryId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IpWhiteList
        /// </summary>
        [DataMember(Name="ipWhiteList", EmitDefaultValue=false)]
        public List<string> IpWhiteList { get; set; }

        /// <summary>
        /// Gets or Sets LatestEthereumTxHash
        /// </summary>
        [DataMember(Name="latestEthereumTxHash", EmitDefaultValue=false)]
        public string LatestEthereumTxHash { get; set; }

        /// <summary>
        /// Gets or Sets LatestGlacierArchiveId
        /// </summary>
        [DataMember(Name="latestGlacierArchiveId", EmitDefaultValue=false)]
        public string LatestGlacierArchiveId { get; set; }

        /// <summary>
        /// Gets or Sets LatestHashRecipientEmails
        /// </summary>
        [DataMember(Name="latestHashRecipientEmails", EmitDefaultValue=false)]
        public List<string> LatestHashRecipientEmails { get; set; }

        /// <summary>
        /// Gets or Sets LogLevelErrorReportRecipientEmails
        /// </summary>
        [DataMember(Name="logLevelErrorReportRecipientEmails", EmitDefaultValue=false)]
        public List<string> LogLevelErrorReportRecipientEmails { get; set; }

        /// <summary>
        /// Gets or Sets LogLevelRegexes
        /// </summary>
        [DataMember(Name="logLevelRegexes", EmitDefaultValue=false)]
        public Dictionary<string, string> LogLevelRegexes { get; set; }

        /// <summary>
        /// Gets or Sets MachineLearningSettings
        /// </summary>
        [DataMember(Name="machineLearningSettings", EmitDefaultValue=false)]
        public MachineLearningSettings MachineLearningSettings { get; set; }

        /// <summary>
        /// Gets or Sets MerkleTreeGenerationMinutes
        /// </summary>
        [DataMember(Name="merkleTreeGenerationMinutes", EmitDefaultValue=false)]
        public int? MerkleTreeGenerationMinutes { get; set; }

        /// <summary>
        /// Gets or Sets MetadataExtractionPaths
        /// </summary>
        [DataMember(Name="metadataExtractionPaths", EmitDefaultValue=false)]
        public MetadataExtractionPaths MetadataExtractionPaths { get; set; }

        /// <summary>
        /// Gets or Sets MissingLogsAlertId
        /// </summary>
        [DataMember(Name="missingLogsAlertId", EmitDefaultValue=false)]
        public Guid? MissingLogsAlertId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OpenDataAnonymizationRegexes
        /// </summary>
        [DataMember(Name="openDataAnonymizationRegexes", EmitDefaultValue=false)]
        public List<string> OpenDataAnonymizationRegexes { get; set; }

        /// <summary>
        /// Gets or Sets OpenDataAnonymizeBodyFields
        /// </summary>
        [DataMember(Name="openDataAnonymizeBodyFields", EmitDefaultValue=false)]
        public List<string> OpenDataAnonymizeBodyFields { get; set; }

        /// <summary>
        /// Gets or Sets OpenDataEnabled
        /// </summary>
        [DataMember(Name="openDataEnabled", EmitDefaultValue=false)]
        public bool? OpenDataEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OpenDataWhitelistRegexes
        /// </summary>
        [DataMember(Name="openDataWhitelistRegexes", EmitDefaultValue=false)]
        public List<string> OpenDataWhitelistRegexes { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets PartialVerificationPeriodMinutes
        /// </summary>
        [DataMember(Name="partialVerificationPeriodMinutes", EmitDefaultValue=false)]
        public int? PartialVerificationPeriodMinutes { get; set; }

        /// <summary>
        /// Gets or Sets PerformVerification
        /// </summary>
        [DataMember(Name="performVerification", EmitDefaultValue=false)]
        public bool? PerformVerification { get; set; }

        /// <summary>
        /// Gets or Sets RetentionMonths
        /// </summary>
        [DataMember(Name="retentionMonths", EmitDefaultValue=false)]
        public int? RetentionMonths { get; set; }

        /// <summary>
        /// Gets or Sets SignatureVerificationPublicKeys
        /// </summary>
        [DataMember(Name="signatureVerificationPublicKeys", EmitDefaultValue=false)]
        public List<string> SignatureVerificationPublicKeys { get; set; }

        /// <summary>
        /// Gets or Sets StoreHashesInEthereum
        /// </summary>
        [DataMember(Name="storeHashesInEthereum", EmitDefaultValue=false)]
        public bool? StoreHashesInEthereum { get; set; }

        /// <summary>
        /// Gets or Sets SyslogId
        /// </summary>
        [DataMember(Name="syslogId", EmitDefaultValue=false)]
        public string SyslogId { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets VerificationFailureReportRecipientEmails
        /// </summary>
        [DataMember(Name="verificationFailureReportRecipientEmails", EmitDefaultValue=false)]
        public List<string> VerificationFailureReportRecipientEmails { get; set; }

        /// <summary>
        /// Gets or Sets VerificationPeriodMinutes
        /// </summary>
        [DataMember(Name="verificationPeriodMinutes", EmitDefaultValue=false)]
        public int? VerificationPeriodMinutes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Application {\n");
            sb.Append("  ContainsPersonalData: ").Append(ContainsPersonalData).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DetailsTransformationScript: ").Append(DetailsTransformationScript).Append("\n");
            sb.Append("  DisplayedDetailsFields: ").Append(DisplayedDetailsFields).Append("\n");
            sb.Append("  GenesisEntryId: ").Append(GenesisEntryId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IpWhiteList: ").Append(IpWhiteList).Append("\n");
            sb.Append("  LatestEthereumTxHash: ").Append(LatestEthereumTxHash).Append("\n");
            sb.Append("  LatestGlacierArchiveId: ").Append(LatestGlacierArchiveId).Append("\n");
            sb.Append("  LatestHashRecipientEmails: ").Append(LatestHashRecipientEmails).Append("\n");
            sb.Append("  LogLevelErrorReportRecipientEmails: ").Append(LogLevelErrorReportRecipientEmails).Append("\n");
            sb.Append("  LogLevelRegexes: ").Append(LogLevelRegexes).Append("\n");
            sb.Append("  MachineLearningSettings: ").Append(MachineLearningSettings).Append("\n");
            sb.Append("  MerkleTreeGenerationMinutes: ").Append(MerkleTreeGenerationMinutes).Append("\n");
            sb.Append("  MetadataExtractionPaths: ").Append(MetadataExtractionPaths).Append("\n");
            sb.Append("  MissingLogsAlertId: ").Append(MissingLogsAlertId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpenDataAnonymizationRegexes: ").Append(OpenDataAnonymizationRegexes).Append("\n");
            sb.Append("  OpenDataAnonymizeBodyFields: ").Append(OpenDataAnonymizeBodyFields).Append("\n");
            sb.Append("  OpenDataEnabled: ").Append(OpenDataEnabled).Append("\n");
            sb.Append("  OpenDataWhitelistRegexes: ").Append(OpenDataWhitelistRegexes).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  PartialVerificationPeriodMinutes: ").Append(PartialVerificationPeriodMinutes).Append("\n");
            sb.Append("  PerformVerification: ").Append(PerformVerification).Append("\n");
            sb.Append("  RetentionMonths: ").Append(RetentionMonths).Append("\n");
            sb.Append("  SignatureVerificationPublicKeys: ").Append(SignatureVerificationPublicKeys).Append("\n");
            sb.Append("  StoreHashesInEthereum: ").Append(StoreHashesInEthereum).Append("\n");
            sb.Append("  SyslogId: ").Append(SyslogId).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  VerificationFailureReportRecipientEmails: ").Append(VerificationFailureReportRecipientEmails).Append("\n");
            sb.Append("  VerificationPeriodMinutes: ").Append(VerificationPeriodMinutes).Append("\n");
            sb.Append("  WarnLevel: ").Append(WarnLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Application);
        }

        /// <summary>
        /// Returns true if Application instances are equal
        /// </summary>
        /// <param name="input">Instance of Application to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Application input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainsPersonalData == input.ContainsPersonalData ||
                    (this.ContainsPersonalData != null &&
                    this.ContainsPersonalData.Equals(input.ContainsPersonalData))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DetailsTransformationScript == input.DetailsTransformationScript ||
                    (this.DetailsTransformationScript != null &&
                    this.DetailsTransformationScript.Equals(input.DetailsTransformationScript))
                ) && 
                (
                    this.DisplayedDetailsFields == input.DisplayedDetailsFields ||
                    (this.DisplayedDetailsFields != null &&
                    this.DisplayedDetailsFields.Equals(input.DisplayedDetailsFields))
                ) && 
                (
                    this.GenesisEntryId == input.GenesisEntryId ||
                    (this.GenesisEntryId != null &&
                    this.GenesisEntryId.Equals(input.GenesisEntryId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IpWhiteList == input.IpWhiteList ||
                    this.IpWhiteList != null &&
                    this.IpWhiteList.SequenceEqual(input.IpWhiteList)
                ) && 
                (
                    this.LatestEthereumTxHash == input.LatestEthereumTxHash ||
                    (this.LatestEthereumTxHash != null &&
                    this.LatestEthereumTxHash.Equals(input.LatestEthereumTxHash))
                ) && 
                (
                    this.LatestGlacierArchiveId == input.LatestGlacierArchiveId ||
                    (this.LatestGlacierArchiveId != null &&
                    this.LatestGlacierArchiveId.Equals(input.LatestGlacierArchiveId))
                ) && 
                (
                    this.LatestHashRecipientEmails == input.LatestHashRecipientEmails ||
                    this.LatestHashRecipientEmails != null &&
                    this.LatestHashRecipientEmails.SequenceEqual(input.LatestHashRecipientEmails)
                ) && 
                (
                    this.LogLevelErrorReportRecipientEmails == input.LogLevelErrorReportRecipientEmails ||
                    this.LogLevelErrorReportRecipientEmails != null &&
                    this.LogLevelErrorReportRecipientEmails.SequenceEqual(input.LogLevelErrorReportRecipientEmails)
                ) && 
                (
                    this.LogLevelRegexes == input.LogLevelRegexes ||
                    this.LogLevelRegexes != null &&
                    this.LogLevelRegexes.SequenceEqual(input.LogLevelRegexes)
                ) && 
                (
                    this.MachineLearningSettings == input.MachineLearningSettings ||
                    (this.MachineLearningSettings != null &&
                    this.MachineLearningSettings.Equals(input.MachineLearningSettings))
                ) && 
                (
                    this.MerkleTreeGenerationMinutes == input.MerkleTreeGenerationMinutes ||
                    (this.MerkleTreeGenerationMinutes != null &&
                    this.MerkleTreeGenerationMinutes.Equals(input.MerkleTreeGenerationMinutes))
                ) && 
                (
                    this.MetadataExtractionPaths == input.MetadataExtractionPaths ||
                    (this.MetadataExtractionPaths != null &&
                    this.MetadataExtractionPaths.Equals(input.MetadataExtractionPaths))
                ) && 
                (
                    this.MissingLogsAlertId == input.MissingLogsAlertId ||
                    (this.MissingLogsAlertId != null &&
                    this.MissingLogsAlertId.Equals(input.MissingLogsAlertId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OpenDataAnonymizationRegexes == input.OpenDataAnonymizationRegexes ||
                    this.OpenDataAnonymizationRegexes != null &&
                    this.OpenDataAnonymizationRegexes.SequenceEqual(input.OpenDataAnonymizationRegexes)
                ) && 
                (
                    this.OpenDataAnonymizeBodyFields == input.OpenDataAnonymizeBodyFields ||
                    this.OpenDataAnonymizeBodyFields != null &&
                    this.OpenDataAnonymizeBodyFields.SequenceEqual(input.OpenDataAnonymizeBodyFields)
                ) && 
                (
                    this.OpenDataEnabled == input.OpenDataEnabled ||
                    (this.OpenDataEnabled != null &&
                    this.OpenDataEnabled.Equals(input.OpenDataEnabled))
                ) && 
                (
                    this.OpenDataWhitelistRegexes == input.OpenDataWhitelistRegexes ||
                    this.OpenDataWhitelistRegexes != null &&
                    this.OpenDataWhitelistRegexes.SequenceEqual(input.OpenDataWhitelistRegexes)
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.PartialVerificationPeriodMinutes == input.PartialVerificationPeriodMinutes ||
                    (this.PartialVerificationPeriodMinutes != null &&
                    this.PartialVerificationPeriodMinutes.Equals(input.PartialVerificationPeriodMinutes))
                ) && 
                (
                    this.PerformVerification == input.PerformVerification ||
                    (this.PerformVerification != null &&
                    this.PerformVerification.Equals(input.PerformVerification))
                ) && 
                (
                    this.RetentionMonths == input.RetentionMonths ||
                    (this.RetentionMonths != null &&
                    this.RetentionMonths.Equals(input.RetentionMonths))
                ) && 
                (
                    this.SignatureVerificationPublicKeys == input.SignatureVerificationPublicKeys ||
                    this.SignatureVerificationPublicKeys != null &&
                    this.SignatureVerificationPublicKeys.SequenceEqual(input.SignatureVerificationPublicKeys)
                ) && 
                (
                    this.StoreHashesInEthereum == input.StoreHashesInEthereum ||
                    (this.StoreHashesInEthereum != null &&
                    this.StoreHashesInEthereum.Equals(input.StoreHashesInEthereum))
                ) && 
                (
                    this.SyslogId == input.SyslogId ||
                    (this.SyslogId != null &&
                    this.SyslogId.Equals(input.SyslogId))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.VerificationFailureReportRecipientEmails == input.VerificationFailureReportRecipientEmails ||
                    this.VerificationFailureReportRecipientEmails != null &&
                    this.VerificationFailureReportRecipientEmails.SequenceEqual(input.VerificationFailureReportRecipientEmails)
                ) && 
                (
                    this.VerificationPeriodMinutes == input.VerificationPeriodMinutes ||
                    (this.VerificationPeriodMinutes != null &&
                    this.VerificationPeriodMinutes.Equals(input.VerificationPeriodMinutes))
                ) && 
                (
                    this.WarnLevel == input.WarnLevel ||
                    (this.WarnLevel != null &&
                    this.WarnLevel.Equals(input.WarnLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainsPersonalData != null)
                    hashCode = hashCode * 59 + this.ContainsPersonalData.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DetailsTransformationScript != null)
                    hashCode = hashCode * 59 + this.DetailsTransformationScript.GetHashCode();
                if (this.DisplayedDetailsFields != null)
                    hashCode = hashCode * 59 + this.DisplayedDetailsFields.GetHashCode();
                if (this.GenesisEntryId != null)
                    hashCode = hashCode * 59 + this.GenesisEntryId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IpWhiteList != null)
                    hashCode = hashCode * 59 + this.IpWhiteList.GetHashCode();
                if (this.LatestEthereumTxHash != null)
                    hashCode = hashCode * 59 + this.LatestEthereumTxHash.GetHashCode();
                if (this.LatestGlacierArchiveId != null)
                    hashCode = hashCode * 59 + this.LatestGlacierArchiveId.GetHashCode();
                if (this.LatestHashRecipientEmails != null)
                    hashCode = hashCode * 59 + this.LatestHashRecipientEmails.GetHashCode();
                if (this.LogLevelErrorReportRecipientEmails != null)
                    hashCode = hashCode * 59 + this.LogLevelErrorReportRecipientEmails.GetHashCode();
                if (this.LogLevelRegexes != null)
                    hashCode = hashCode * 59 + this.LogLevelRegexes.GetHashCode();
                if (this.MachineLearningSettings != null)
                    hashCode = hashCode * 59 + this.MachineLearningSettings.GetHashCode();
                if (this.MerkleTreeGenerationMinutes != null)
                    hashCode = hashCode * 59 + this.MerkleTreeGenerationMinutes.GetHashCode();
                if (this.MetadataExtractionPaths != null)
                    hashCode = hashCode * 59 + this.MetadataExtractionPaths.GetHashCode();
                if (this.MissingLogsAlertId != null)
                    hashCode = hashCode * 59 + this.MissingLogsAlertId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OpenDataAnonymizationRegexes != null)
                    hashCode = hashCode * 59 + this.OpenDataAnonymizationRegexes.GetHashCode();
                if (this.OpenDataAnonymizeBodyFields != null)
                    hashCode = hashCode * 59 + this.OpenDataAnonymizeBodyFields.GetHashCode();
                if (this.OpenDataEnabled != null)
                    hashCode = hashCode * 59 + this.OpenDataEnabled.GetHashCode();
                if (this.OpenDataWhitelistRegexes != null)
                    hashCode = hashCode * 59 + this.OpenDataWhitelistRegexes.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.PartialVerificationPeriodMinutes != null)
                    hashCode = hashCode * 59 + this.PartialVerificationPeriodMinutes.GetHashCode();
                if (this.PerformVerification != null)
                    hashCode = hashCode * 59 + this.PerformVerification.GetHashCode();
                if (this.RetentionMonths != null)
                    hashCode = hashCode * 59 + this.RetentionMonths.GetHashCode();
                if (this.SignatureVerificationPublicKeys != null)
                    hashCode = hashCode * 59 + this.SignatureVerificationPublicKeys.GetHashCode();
                if (this.StoreHashesInEthereum != null)
                    hashCode = hashCode * 59 + this.StoreHashesInEthereum.GetHashCode();
                if (this.SyslogId != null)
                    hashCode = hashCode * 59 + this.SyslogId.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.VerificationFailureReportRecipientEmails != null)
                    hashCode = hashCode * 59 + this.VerificationFailureReportRecipientEmails.GetHashCode();
                if (this.VerificationPeriodMinutes != null)
                    hashCode = hashCode * 59 + this.VerificationPeriodMinutes.GetHashCode();
                if (this.WarnLevel != null)
                    hashCode = hashCode * 59 + this.WarnLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
