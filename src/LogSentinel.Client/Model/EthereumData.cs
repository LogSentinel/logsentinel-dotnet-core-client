/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// EthereumData
    /// </summary>
    [DataContract]
    public partial class EthereumData :  IEquatable<EthereumData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumData" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId.</param>
        /// <param name="blockHash">blockHash.</param>
        /// <param name="blockNumber">blockNumber.</param>
        /// <param name="created">created.</param>
        /// <param name="hash">hash.</param>
        /// <param name="id">id.</param>
        /// <param name="input">input.</param>
        /// <param name="localHash">localHash.</param>
        /// <param name="transactionIndex">transactionIndex.</param>
        /// <param name="txFrom">txFrom.</param>
        /// <param name="txTo">txTo.</param>
        public EthereumData(Guid? applicationId = default(Guid?), string blockHash = default(string), long? blockNumber = default(long?), DateTime? created = default(DateTime?), string hash = default(string), Guid? id = default(Guid?), string input = default(string), string localHash = default(string), long? transactionIndex = default(long?), string txFrom = default(string), string txTo = default(string))
        {
            this.ApplicationId = applicationId;
            this.BlockHash = blockHash;
            this.BlockNumber = blockNumber;
            this.Created = created;
            this.Hash = hash;
            this.Id = id;
            this.Input = input;
            this.LocalHash = localHash;
            this.TransactionIndex = transactionIndex;
            this.TxFrom = txFrom;
            this.TxTo = txTo;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public Guid? ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets BlockHash
        /// </summary>
        [DataMember(Name="blockHash", EmitDefaultValue=false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name="blockNumber", EmitDefaultValue=false)]
        public long? BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// Gets or Sets LocalHash
        /// </summary>
        [DataMember(Name="localHash", EmitDefaultValue=false)]
        public string LocalHash { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIndex
        /// </summary>
        [DataMember(Name="transactionIndex", EmitDefaultValue=false)]
        public long? TransactionIndex { get; set; }

        /// <summary>
        /// Gets or Sets TxFrom
        /// </summary>
        [DataMember(Name="txFrom", EmitDefaultValue=false)]
        public string TxFrom { get; set; }

        /// <summary>
        /// Gets or Sets TxTo
        /// </summary>
        [DataMember(Name="txTo", EmitDefaultValue=false)]
        public string TxTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EthereumData {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  LocalHash: ").Append(LocalHash).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  TxFrom: ").Append(TxFrom).Append("\n");
            sb.Append("  TxTo: ").Append(TxTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EthereumData);
        }

        /// <summary>
        /// Returns true if EthereumData instances are equal
        /// </summary>
        /// <param name="input">Instance of EthereumData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EthereumData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.LocalHash == input.LocalHash ||
                    (this.LocalHash != null &&
                    this.LocalHash.Equals(input.LocalHash))
                ) && 
                (
                    this.TransactionIndex == input.TransactionIndex ||
                    (this.TransactionIndex != null &&
                    this.TransactionIndex.Equals(input.TransactionIndex))
                ) && 
                (
                    this.TxFrom == input.TxFrom ||
                    (this.TxFrom != null &&
                    this.TxFrom.Equals(input.TxFrom))
                ) && 
                (
                    this.TxTo == input.TxTo ||
                    (this.TxTo != null &&
                    this.TxTo.Equals(input.TxTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.BlockHash != null)
                    hashCode = hashCode * 59 + this.BlockHash.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.LocalHash != null)
                    hashCode = hashCode * 59 + this.LocalHash.GetHashCode();
                if (this.TransactionIndex != null)
                    hashCode = hashCode * 59 + this.TransactionIndex.GetHashCode();
                if (this.TxFrom != null)
                    hashCode = hashCode * 59 + this.TxFrom.GetHashCode();
                if (this.TxTo != null)
                    hashCode = hashCode * 59 + this.TxTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
