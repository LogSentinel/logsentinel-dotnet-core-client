/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// ConsistencyProof
    /// </summary>
    [DataContract]
    public partial class ConsistencyProof :  IEquatable<ConsistencyProof>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsistencyProof" /> class.
        /// </summary>
        /// <param name="firstHash">firstHash.</param>
        /// <param name="firstTreeSize">firstTreeSize.</param>
        /// <param name="path">path.</param>
        /// <param name="secondHash">secondHash.</param>
        /// <param name="secondTreeSize">secondTreeSize.</param>
        public ConsistencyProof(string firstHash = default(string), int? firstTreeSize = default(int?), List<string> path = default(List<string>), string secondHash = default(string), int? secondTreeSize = default(int?))
        {
            this.FirstHash = firstHash;
            this.FirstTreeSize = firstTreeSize;
            this.Path = path;
            this.SecondHash = secondHash;
            this.SecondTreeSize = secondTreeSize;
        }
        
        /// <summary>
        /// Gets or Sets FirstHash
        /// </summary>
        [DataMember(Name="firstHash", EmitDefaultValue=false)]
        public string FirstHash { get; set; }

        /// <summary>
        /// Gets or Sets FirstTreeSize
        /// </summary>
        [DataMember(Name="firstTreeSize", EmitDefaultValue=false)]
        public int? FirstTreeSize { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public List<string> Path { get; set; }

        /// <summary>
        /// Gets or Sets SecondHash
        /// </summary>
        [DataMember(Name="secondHash", EmitDefaultValue=false)]
        public string SecondHash { get; set; }

        /// <summary>
        /// Gets or Sets SecondTreeSize
        /// </summary>
        [DataMember(Name="secondTreeSize", EmitDefaultValue=false)]
        public int? SecondTreeSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsistencyProof {\n");
            sb.Append("  FirstHash: ").Append(FirstHash).Append("\n");
            sb.Append("  FirstTreeSize: ").Append(FirstTreeSize).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  SecondHash: ").Append(SecondHash).Append("\n");
            sb.Append("  SecondTreeSize: ").Append(SecondTreeSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsistencyProof);
        }

        /// <summary>
        /// Returns true if ConsistencyProof instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsistencyProof to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsistencyProof input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstHash == input.FirstHash ||
                    (this.FirstHash != null &&
                    this.FirstHash.Equals(input.FirstHash))
                ) && 
                (
                    this.FirstTreeSize == input.FirstTreeSize ||
                    (this.FirstTreeSize != null &&
                    this.FirstTreeSize.Equals(input.FirstTreeSize))
                ) && 
                (
                    this.Path == input.Path ||
                    this.Path != null &&
                    this.Path.SequenceEqual(input.Path)
                ) && 
                (
                    this.SecondHash == input.SecondHash ||
                    (this.SecondHash != null &&
                    this.SecondHash.Equals(input.SecondHash))
                ) && 
                (
                    this.SecondTreeSize == input.SecondTreeSize ||
                    (this.SecondTreeSize != null &&
                    this.SecondTreeSize.Equals(input.SecondTreeSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstHash != null)
                    hashCode = hashCode * 59 + this.FirstHash.GetHashCode();
                if (this.FirstTreeSize != null)
                    hashCode = hashCode * 59 + this.FirstTreeSize.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.SecondHash != null)
                    hashCode = hashCode * 59 + this.SecondHash.GetHashCode();
                if (this.SecondTreeSize != null)
                    hashCode = hashCode * 59 + this.SecondTreeSize.GetHashCode();
                return hashCode;
            }
        }
    }

}
