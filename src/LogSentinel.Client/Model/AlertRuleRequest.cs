/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// AlertRuleRequest
    /// </summary>
    [DataContract]
    public partial class AlertRuleRequest :  IEquatable<AlertRuleRequest>
    {
        /// <summary>
        /// Defines AggregationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AggregationTypeEnum
        {
            
            /// <summary>
            /// Enum COUNT for value: COUNT
            /// </summary>
            [EnumMember(Value = "COUNT")]
            COUNT = 1,
            
            /// <summary>
            /// Enum AVG for value: AVG
            /// </summary>
            [EnumMember(Value = "AVG")]
            AVG = 2,
            
            /// <summary>
            /// Enum SUM for value: SUM
            /// </summary>
            [EnumMember(Value = "SUM")]
            SUM = 3
        }

        /// <summary>
        /// Gets or Sets AggregationType
        /// </summary>
        [DataMember(Name="aggregationType", EmitDefaultValue=false)]
        public AggregationTypeEnum? AggregationType { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum STDEV for value: ST_DEV
            /// </summary>
            [EnumMember(Value = "ST_DEV")]
            STDEV = 1,
            
            /// <summary>
            /// Enum MEAN for value: MEAN
            /// </summary>
            [EnumMember(Value = "MEAN")]
            MEAN = 2,
            
            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 3
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertRuleRequest" /> class.
        /// </summary>
        /// <param name="aggregationPeriod">aggregationPeriod.</param>
        /// <param name="aggregationType">aggregationType.</param>
        /// <param name="alertDestinationIds">alertDestinationIds.</param>
        /// <param name="applicationId">applicationId.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="groupByField">groupByField.</param>
        /// <param name="name">name.</param>
        /// <param name="searchPeriod">searchPeriod.</param>
        /// <param name="thresholdValue">thresholdValue.</param>
        /// <param name="type">type.</param>
        public AlertRuleRequest(string aggregationPeriod = default(string), AggregationTypeEnum? aggregationType = default(AggregationTypeEnum?), List<Guid?> alertDestinationIds = default(List<Guid?>), Guid? applicationId = default(Guid?), bool? enabled = default(bool?), string groupByField = default(string), string name = default(string), string searchPeriod = default(string), double? thresholdValue = default(double?), TypeEnum? type = default(TypeEnum?))
        {
            this.AggregationPeriod = aggregationPeriod;
            this.AggregationType = aggregationType;
            this.AlertDestinationIds = alertDestinationIds;
            this.ApplicationId = applicationId;
            this.Enabled = enabled;
            this.GroupByField = groupByField;
            this.Name = name;
            this.SearchPeriod = searchPeriod;
            this.ThresholdValue = thresholdValue;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets AggregationPeriod
        /// </summary>
        [DataMember(Name="aggregationPeriod", EmitDefaultValue=false)]
        public string AggregationPeriod { get; set; }


        /// <summary>
        /// Gets or Sets AlertDestinationIds
        /// </summary>
        [DataMember(Name="alertDestinationIds", EmitDefaultValue=false)]
        public List<Guid?> AlertDestinationIds { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public Guid? ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets GroupByField
        /// </summary>
        [DataMember(Name="groupByField", EmitDefaultValue=false)]
        public string GroupByField { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SearchPeriod
        /// </summary>
        [DataMember(Name="searchPeriod", EmitDefaultValue=false)]
        public string SearchPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdValue
        /// </summary>
        [DataMember(Name="thresholdValue", EmitDefaultValue=false)]
        public double? ThresholdValue { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertRuleRequest {\n");
            sb.Append("  AggregationPeriod: ").Append(AggregationPeriod).Append("\n");
            sb.Append("  AggregationType: ").Append(AggregationType).Append("\n");
            sb.Append("  AlertDestinationIds: ").Append(AlertDestinationIds).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  GroupByField: ").Append(GroupByField).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SearchPeriod: ").Append(SearchPeriod).Append("\n");
            sb.Append("  ThresholdValue: ").Append(ThresholdValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertRuleRequest);
        }

        /// <summary>
        /// Returns true if AlertRuleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertRuleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertRuleRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AggregationPeriod == input.AggregationPeriod ||
                    (this.AggregationPeriod != null &&
                    this.AggregationPeriod.Equals(input.AggregationPeriod))
                ) && 
                (
                    this.AggregationType == input.AggregationType ||
                    (this.AggregationType != null &&
                    this.AggregationType.Equals(input.AggregationType))
                ) && 
                (
                    this.AlertDestinationIds == input.AlertDestinationIds ||
                    this.AlertDestinationIds != null &&
                    this.AlertDestinationIds.SequenceEqual(input.AlertDestinationIds)
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.GroupByField == input.GroupByField ||
                    (this.GroupByField != null &&
                    this.GroupByField.Equals(input.GroupByField))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SearchPeriod == input.SearchPeriod ||
                    (this.SearchPeriod != null &&
                    this.SearchPeriod.Equals(input.SearchPeriod))
                ) && 
                (
                    this.ThresholdValue == input.ThresholdValue ||
                    (this.ThresholdValue != null &&
                    this.ThresholdValue.Equals(input.ThresholdValue))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregationPeriod != null)
                    hashCode = hashCode * 59 + this.AggregationPeriod.GetHashCode();
                if (this.AggregationType != null)
                    hashCode = hashCode * 59 + this.AggregationType.GetHashCode();
                if (this.AlertDestinationIds != null)
                    hashCode = hashCode * 59 + this.AlertDestinationIds.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.GroupByField != null)
                    hashCode = hashCode * 59 + this.GroupByField.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SearchPeriod != null)
                    hashCode = hashCode * 59 + this.SearchPeriod.GetHashCode();
                if (this.ThresholdValue != null)
                    hashCode = hashCode * 59 + this.ThresholdValue.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }
    }

}
