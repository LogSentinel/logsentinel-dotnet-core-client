/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// ResolvedVerificationFailureResponse
    /// </summary>
    [DataContract]
    public partial class ResolvedVerificationFailureResponse :  IEquatable<ResolvedVerificationFailureResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolvedVerificationFailureResponse" /> class.
        /// </summary>
        /// <param name="resolution">resolution.</param>
        /// <param name="verification">verification.</param>
        public ResolvedVerificationFailureResponse(ResolvedVerificationFailure resolution = default(ResolvedVerificationFailure), Verification verification = default(Verification))
        {
            this.Resolution = resolution;
            this.Verification = verification;
        }
        
        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="resolution", EmitDefaultValue=false)]
        public ResolvedVerificationFailure Resolution { get; set; }

        /// <summary>
        /// Gets or Sets Verification
        /// </summary>
        [DataMember(Name="verification", EmitDefaultValue=false)]
        public Verification Verification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResolvedVerificationFailureResponse {\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Verification: ").Append(Verification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResolvedVerificationFailureResponse);
        }

        /// <summary>
        /// Returns true if ResolvedVerificationFailureResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ResolvedVerificationFailureResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResolvedVerificationFailureResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.Verification == input.Verification ||
                    (this.Verification != null &&
                    this.Verification.Equals(input.Verification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                if (this.Verification != null)
                    hashCode = hashCode * 59 + this.Verification.GetHashCode();
                return hashCode;
            }
        }
    }

}
