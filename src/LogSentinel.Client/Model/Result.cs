/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// Result
    /// </summary>
    [DataContract]
    public partial class Result :  IEquatable<Result>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Result" /> class.
        /// </summary>
        /// <param name="additionalDetails">additionalDetails.</param>
        /// <param name="dataSubjectId">dataSubjectId.</param>
        /// <param name="dataSubjectName">dataSubjectName.</param>
        /// <param name="requestEntryId">requestEntryId.</param>
        /// <param name="result">result.</param>
        /// <param name="timestamp">timestamp.</param>
        public Result(string additionalDetails = default(string), string dataSubjectId = default(string), string dataSubjectName = default(string), string requestEntryId = default(string), string result = default(string), long? timestamp = default(long?))
        {
            this.AdditionalDetails = additionalDetails;
            this.DataSubjectId = dataSubjectId;
            this.DataSubjectName = dataSubjectName;
            this.RequestEntryId = requestEntryId;
            this._Result = result;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalDetails
        /// </summary>
        [DataMember(Name="additionalDetails", EmitDefaultValue=false)]
        public string AdditionalDetails { get; set; }

        /// <summary>
        /// Gets or Sets DataSubjectId
        /// </summary>
        [DataMember(Name="dataSubjectId", EmitDefaultValue=false)]
        public string DataSubjectId { get; set; }

        /// <summary>
        /// Gets or Sets DataSubjectName
        /// </summary>
        [DataMember(Name="dataSubjectName", EmitDefaultValue=false)]
        public string DataSubjectName { get; set; }

        /// <summary>
        /// Gets or Sets RequestEntryId
        /// </summary>
        [DataMember(Name="requestEntryId", EmitDefaultValue=false)]
        public string RequestEntryId { get; set; }

        /// <summary>
        /// Gets or Sets _Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string _Result { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Result {\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  DataSubjectId: ").Append(DataSubjectId).Append("\n");
            sb.Append("  DataSubjectName: ").Append(DataSubjectName).Append("\n");
            sb.Append("  RequestEntryId: ").Append(RequestEntryId).Append("\n");
            sb.Append("  _Result: ").Append(_Result).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Result);
        }

        /// <summary>
        /// Returns true if Result instances are equal
        /// </summary>
        /// <param name="input">Instance of Result to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Result input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    (this.AdditionalDetails != null &&
                    this.AdditionalDetails.Equals(input.AdditionalDetails))
                ) && 
                (
                    this.DataSubjectId == input.DataSubjectId ||
                    (this.DataSubjectId != null &&
                    this.DataSubjectId.Equals(input.DataSubjectId))
                ) && 
                (
                    this.DataSubjectName == input.DataSubjectName ||
                    (this.DataSubjectName != null &&
                    this.DataSubjectName.Equals(input.DataSubjectName))
                ) && 
                (
                    this.RequestEntryId == input.RequestEntryId ||
                    (this.RequestEntryId != null &&
                    this.RequestEntryId.Equals(input.RequestEntryId))
                ) && 
                (
                    this._Result == input._Result ||
                    (this._Result != null &&
                    this._Result.Equals(input._Result))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                if (this.DataSubjectId != null)
                    hashCode = hashCode * 59 + this.DataSubjectId.GetHashCode();
                if (this.DataSubjectName != null)
                    hashCode = hashCode * 59 + this.DataSubjectName.GetHashCode();
                if (this.RequestEntryId != null)
                    hashCode = hashCode * 59 + this.RequestEntryId.GetHashCode();
                if (this._Result != null)
                    hashCode = hashCode * 59 + this._Result.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
