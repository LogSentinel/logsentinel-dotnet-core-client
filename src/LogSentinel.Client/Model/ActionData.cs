/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// ActionData
    /// </summary>
    [DataContract]
    public partial class ActionData :  IEquatable<ActionData>
    {
        /// <summary>
        /// Defines EntryType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntryTypeEnum
        {
            
            /// <summary>
            /// Enum BUSINESSLOGICENTRY for value: BUSINESS_LOGIC_ENTRY
            /// </summary>
            [EnumMember(Value = "BUSINESS_LOGIC_ENTRY")]
            BUSINESSLOGICENTRY = 1,
            
            /// <summary>
            /// Enum DATABASEQUERY for value: DATABASE_QUERY
            /// </summary>
            [EnumMember(Value = "DATABASE_QUERY")]
            DATABASEQUERY = 2,
            
            /// <summary>
            /// Enum SYSTEMEVENT for value: SYSTEM_EVENT
            /// </summary>
            [EnumMember(Value = "SYSTEM_EVENT")]
            SYSTEMEVENT = 3,
            
            /// <summary>
            /// Enum NETWORKEVENT for value: NETWORK_EVENT
            /// </summary>
            [EnumMember(Value = "NETWORK_EVENT")]
            NETWORKEVENT = 4,
            
            /// <summary>
            /// Enum ANONYMIZEDENTRY for value: ANONYMIZED_ENTRY
            /// </summary>
            [EnumMember(Value = "ANONYMIZED_ENTRY")]
            ANONYMIZEDENTRY = 5,
            
            /// <summary>
            /// Enum SPECIALIZEDBUSINESSLOGICENTRY for value: SPECIALIZED_BUSINESS_LOGIC_ENTRY
            /// </summary>
            [EnumMember(Value = "SPECIALIZED_BUSINESS_LOGIC_ENTRY")]
            SPECIALIZEDBUSINESSLOGICENTRY = 6,
            
            /// <summary>
            /// Enum DOCUMENT for value: DOCUMENT
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENT = 7
        }

        /// <summary>
        /// Gets or Sets EntryType
        /// </summary>
        [DataMember(Name="entryType", EmitDefaultValue=false)]
        public EntryTypeEnum? EntryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionData" /> class.
        /// </summary>
        /// <param name="action">action.</param>
        /// <param name="details">details.</param>
        /// <param name="entityId">entityId.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="entryType">entryType.</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp.</param>
        public ActionData(string action = default(string), string details = default(string), string entityId = default(string), string entityType = default(string), EntryTypeEnum? entryType = default(EntryTypeEnum?), long? originalEventTimestamp = default(long?))
        {
            this.Action = action;
            this.Details = details;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.EntryType = entryType;
            this.OriginalEventTimestamp = originalEventTimestamp;
        }
        
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }


        /// <summary>
        /// Gets or Sets OriginalEventTimestamp
        /// </summary>
        [DataMember(Name="originalEventTimestamp", EmitDefaultValue=false)]
        public long? OriginalEventTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionData {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntryType: ").Append(EntryType).Append("\n");
            sb.Append("  OriginalEventTimestamp: ").Append(OriginalEventTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionData);
        }

        /// <summary>
        /// Returns true if ActionData instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntryType == input.EntryType ||
                    (this.EntryType != null &&
                    this.EntryType.Equals(input.EntryType))
                ) && 
                (
                    this.OriginalEventTimestamp == input.OriginalEventTimestamp ||
                    (this.OriginalEventTimestamp != null &&
                    this.OriginalEventTimestamp.Equals(input.OriginalEventTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntryType != null)
                    hashCode = hashCode * 59 + this.EntryType.GetHashCode();
                if (this.OriginalEventTimestamp != null)
                    hashCode = hashCode * 59 + this.OriginalEventTimestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
