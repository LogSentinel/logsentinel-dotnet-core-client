/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// WorkingHoursDto
    /// </summary>
    [DataContract]
    public partial class WorkingHoursDto :  IEquatable<WorkingHoursDto>, IValidatableObject
    {
        /// <summary>
        /// Defines NonWorking
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NonWorkingEnum
        {
            
            /// <summary>
            /// Enum MONDAY for value: MONDAY
            /// </summary>
            [EnumMember(Value = "MONDAY")]
            MONDAY = 1,
            
            /// <summary>
            /// Enum TUESDAY for value: TUESDAY
            /// </summary>
            [EnumMember(Value = "TUESDAY")]
            TUESDAY = 2,
            
            /// <summary>
            /// Enum WEDNESDAY for value: WEDNESDAY
            /// </summary>
            [EnumMember(Value = "WEDNESDAY")]
            WEDNESDAY = 3,
            
            /// <summary>
            /// Enum THURSDAY for value: THURSDAY
            /// </summary>
            [EnumMember(Value = "THURSDAY")]
            THURSDAY = 4,
            
            /// <summary>
            /// Enum FRIDAY for value: FRIDAY
            /// </summary>
            [EnumMember(Value = "FRIDAY")]
            FRIDAY = 5,
            
            /// <summary>
            /// Enum SATURDAY for value: SATURDAY
            /// </summary>
            [EnumMember(Value = "SATURDAY")]
            SATURDAY = 6,
            
            /// <summary>
            /// Enum SUNDAY for value: SUNDAY
            /// </summary>
            [EnumMember(Value = "SUNDAY")]
            SUNDAY = 7
        }


        /// <summary>
        /// Gets or Sets NonWorking
        /// </summary>
        [DataMember(Name="nonWorking", EmitDefaultValue=false)]
        public List<NonWorkingEnum> NonWorking { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkingHoursDto" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId.</param>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="endStr">endStr.</param>
        /// <param name="holidays">holidays.</param>
        /// <param name="id">id.</param>
        /// <param name="nonWorking">nonWorking.</param>
        /// <param name="offset">offset.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="startStr">startStr.</param>
        public WorkingHoursDto(Guid? applicationId = default(Guid?), string applicationName = default(string), string endStr = default(string), List<string> holidays = default(List<string>), Guid? id = default(Guid?), List<NonWorkingEnum> nonWorking = default(List<NonWorkingEnum>), string offset = default(string), Guid? organizationId = default(Guid?), string startStr = default(string))
        {
            this.ApplicationId = applicationId;
            this.ApplicationName = applicationName;
            this.EndStr = endStr;
            this.Holidays = holidays;
            this.Id = id;
            this.NonWorking = nonWorking;
            this.Offset = offset;
            this.OrganizationId = organizationId;
            this.StartStr = startStr;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public Guid? ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets EndStr
        /// </summary>
        [DataMember(Name="endStr", EmitDefaultValue=false)]
        public string EndStr { get; set; }

        /// <summary>
        /// Gets or Sets Holidays
        /// </summary>
        [DataMember(Name="holidays", EmitDefaultValue=false)]
        public List<string> Holidays { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }


        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public string Offset { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets StartStr
        /// </summary>
        [DataMember(Name="startStr", EmitDefaultValue=false)]
        public string StartStr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingHoursDto {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  EndStr: ").Append(EndStr).Append("\n");
            sb.Append("  Holidays: ").Append(Holidays).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NonWorking: ").Append(NonWorking).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  StartStr: ").Append(StartStr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkingHoursDto);
        }

        /// <summary>
        /// Returns true if WorkingHoursDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkingHoursDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingHoursDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.EndStr == input.EndStr ||
                    (this.EndStr != null &&
                    this.EndStr.Equals(input.EndStr))
                ) && 
                (
                    this.Holidays == input.Holidays ||
                    this.Holidays != null &&
                    this.Holidays.SequenceEqual(input.Holidays)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NonWorking == input.NonWorking ||
                    this.NonWorking != null &&
                    this.NonWorking.SequenceEqual(input.NonWorking)
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.StartStr == input.StartStr ||
                    (this.StartStr != null &&
                    this.StartStr.Equals(input.StartStr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.EndStr != null)
                    hashCode = hashCode * 59 + this.EndStr.GetHashCode();
                if (this.Holidays != null)
                    hashCode = hashCode * 59 + this.Holidays.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NonWorking != null)
                    hashCode = hashCode * 59 + this.NonWorking.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.StartStr != null)
                    hashCode = hashCode * 59 + this.StartStr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
