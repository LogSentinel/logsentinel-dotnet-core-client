/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// AlertRuleRun
    /// </summary>
    [DataContract]
    public partial class AlertRuleRun :  IEquatable<AlertRuleRun>, IValidatableObject
    {
        /// <summary>
        /// Defines ThresholdType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThresholdTypeEnum
        {
            
            /// <summary>
            /// Enum ABOVE for value: ABOVE
            /// </summary>
            [EnumMember(Value = "ABOVE")]
            ABOVE = 1,
            
            /// <summary>
            /// Enum BELOW for value: BELOW
            /// </summary>
            [EnumMember(Value = "BELOW")]
            BELOW = 2,
            
            /// <summary>
            /// Enum BOTH for value: BOTH
            /// </summary>
            [EnumMember(Value = "BOTH")]
            BOTH = 3
        }

        /// <summary>
        /// Gets or Sets ThresholdType
        /// </summary>
        [DataMember(Name="thresholdType", EmitDefaultValue=false)]
        public ThresholdTypeEnum? ThresholdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertRuleRun" /> class.
        /// </summary>
        /// <param name="actualValue">actualValue.</param>
        /// <param name="alertRuleId">alertRuleId.</param>
        /// <param name="alertRuleName">alertRuleName.</param>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="created">created.</param>
        /// <param name="details">details.</param>
        /// <param name="executionDuration">executionDuration.</param>
        /// <param name="fired">fired.</param>
        /// <param name="id">id.</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="threshold">threshold.</param>
        /// <param name="thresholdType">thresholdType.</param>
        public AlertRuleRun(double? actualValue = default(double?), Guid? alertRuleId = default(Guid?), string alertRuleName = default(string), string applicationName = default(string), DateTime? created = default(DateTime?), string details = default(string), long? executionDuration = default(long?), bool? fired = default(bool?), Guid? id = default(Guid?), Guid? organizationId = default(Guid?), double? threshold = default(double?), ThresholdTypeEnum? thresholdType = default(ThresholdTypeEnum?))
        {
            this.ActualValue = actualValue;
            this.AlertRuleId = alertRuleId;
            this.AlertRuleName = alertRuleName;
            this.ApplicationName = applicationName;
            this.Created = created;
            this.Details = details;
            this.ExecutionDuration = executionDuration;
            this.Fired = fired;
            this.Id = id;
            this.OrganizationId = organizationId;
            this.Threshold = threshold;
            this.ThresholdType = thresholdType;
        }
        
        /// <summary>
        /// Gets or Sets ActualValue
        /// </summary>
        [DataMember(Name="actualValue", EmitDefaultValue=false)]
        public double? ActualValue { get; set; }

        /// <summary>
        /// Gets or Sets AlertRuleId
        /// </summary>
        [DataMember(Name="alertRuleId", EmitDefaultValue=false)]
        public Guid? AlertRuleId { get; set; }

        /// <summary>
        /// Gets or Sets AlertRuleName
        /// </summary>
        [DataMember(Name="alertRuleName", EmitDefaultValue=false)]
        public string AlertRuleName { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionDuration
        /// </summary>
        [DataMember(Name="executionDuration", EmitDefaultValue=false)]
        public long? ExecutionDuration { get; set; }

        /// <summary>
        /// Gets or Sets Fired
        /// </summary>
        [DataMember(Name="fired", EmitDefaultValue=false)]
        public bool? Fired { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public double? Threshold { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertRuleRun {\n");
            sb.Append("  ActualValue: ").Append(ActualValue).Append("\n");
            sb.Append("  AlertRuleId: ").Append(AlertRuleId).Append("\n");
            sb.Append("  AlertRuleName: ").Append(AlertRuleName).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  ExecutionDuration: ").Append(ExecutionDuration).Append("\n");
            sb.Append("  Fired: ").Append(Fired).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  ThresholdType: ").Append(ThresholdType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertRuleRun);
        }

        /// <summary>
        /// Returns true if AlertRuleRun instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertRuleRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertRuleRun input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActualValue == input.ActualValue ||
                    (this.ActualValue != null &&
                    this.ActualValue.Equals(input.ActualValue))
                ) && 
                (
                    this.AlertRuleId == input.AlertRuleId ||
                    (this.AlertRuleId != null &&
                    this.AlertRuleId.Equals(input.AlertRuleId))
                ) && 
                (
                    this.AlertRuleName == input.AlertRuleName ||
                    (this.AlertRuleName != null &&
                    this.AlertRuleName.Equals(input.AlertRuleName))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.ExecutionDuration == input.ExecutionDuration ||
                    (this.ExecutionDuration != null &&
                    this.ExecutionDuration.Equals(input.ExecutionDuration))
                ) && 
                (
                    this.Fired == input.Fired ||
                    (this.Fired != null &&
                    this.Fired.Equals(input.Fired))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                ) && 
                (
                    this.ThresholdType == input.ThresholdType ||
                    (this.ThresholdType != null &&
                    this.ThresholdType.Equals(input.ThresholdType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualValue != null)
                    hashCode = hashCode * 59 + this.ActualValue.GetHashCode();
                if (this.AlertRuleId != null)
                    hashCode = hashCode * 59 + this.AlertRuleId.GetHashCode();
                if (this.AlertRuleName != null)
                    hashCode = hashCode * 59 + this.AlertRuleName.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.ExecutionDuration != null)
                    hashCode = hashCode * 59 + this.ExecutionDuration.GetHashCode();
                if (this.Fired != null)
                    hashCode = hashCode * 59 + this.Fired.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                if (this.ThresholdType != null)
                    hashCode = hashCode * 59 + this.ThresholdType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
