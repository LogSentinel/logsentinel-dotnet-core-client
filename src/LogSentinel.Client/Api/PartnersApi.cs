/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPartnersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels organization by Id and deletes all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns></returns>
        void CancelOrganization (Guid? organizationId);

        /// <summary>
        /// Cancels organization by Id and deletes all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelOrganizationWithHttpInfo (Guid? organizationId);
        /// <summary>
        /// Fetch all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Guid?&gt;</returns>
        List<Guid?> FetchAllOrganizations ();

        /// <summary>
        /// Fetch all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Guid?&gt;</returns>
        ApiResponse<List<Guid?>> FetchAllOrganizationsWithHttpInfo ();
        /// <summary>
        /// API credentials per organization from organizations owned by partner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;</returns>
        Dictionary<string, List<APICredentialsOrganization>> GetApiCredentials ();

        /// <summary>
        /// API credentials per organization from organizations owned by partner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<APICredentialsOrganization>>> GetApiCredentialsWithHttpInfo ();
        /// <summary>
        /// Get the organization for the supplied email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>OrganizationDto</returns>
        OrganizationDto GetOrganizationByUserEmail (string email);

        /// <summary>
        /// Get the organization for the supplied email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of OrganizationDto</returns>
        ApiResponse<OrganizationDto> GetOrganizationByUserEmailWithHttpInfo (string email);
        /// <summary>
        /// Get user id by user email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Guid?</returns>
        Guid? GetUserIdByEmail (string email);

        /// <summary>
        /// Get user id by user email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> GetUserIdByEmailWithHttpInfo (string email);
        /// <summary>
        /// Register a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>RegistrationResponse</returns>
        RegistrationResponse RegisterUser (UserRegistrationRequest request);

        /// <summary>
        /// Register a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of RegistrationResponse</returns>
        ApiResponse<RegistrationResponse> RegisterUserWithHttpInfo (UserRegistrationRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancels organization by Id and deletes all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelOrganizationAsync (Guid? organizationId);

        /// <summary>
        /// Cancels organization by Id and deletes all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrganizationAsyncWithHttpInfo (Guid? organizationId);
        /// <summary>
        /// Fetch all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Guid?&gt;</returns>
        System.Threading.Tasks.Task<List<Guid?>> FetchAllOrganizationsAsync ();

        /// <summary>
        /// Fetch all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Guid?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid?>>> FetchAllOrganizationsAsyncWithHttpInfo ();
        /// <summary>
        /// API credentials per organization from organizations owned by partner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<APICredentialsOrganization>>> GetApiCredentialsAsync ();

        /// <summary>
        /// API credentials per organization from organizations owned by partner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<APICredentialsOrganization>>>> GetApiCredentialsAsyncWithHttpInfo ();
        /// <summary>
        /// Get the organization for the supplied email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of OrganizationDto</returns>
        System.Threading.Tasks.Task<OrganizationDto> GetOrganizationByUserEmailAsync (string email);

        /// <summary>
        /// Get the organization for the supplied email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (OrganizationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationDto>> GetOrganizationByUserEmailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Get user id by user email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> GetUserIdByEmailAsync (string email);

        /// <summary>
        /// Get user id by user email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> GetUserIdByEmailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Register a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of RegistrationResponse</returns>
        System.Threading.Tasks.Task<RegistrationResponse> RegisterUserAsync (UserRegistrationRequest request);

        /// <summary>
        /// Register a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (RegistrationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationResponse>> RegisterUserAsyncWithHttpInfo (UserRegistrationRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PartnersApi : IPartnersApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PartnersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PartnersApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PartnersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PartnersApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancels organization by Id and deletes all users 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns></returns>
        public void CancelOrganization (Guid? organizationId)
        {
             CancelOrganizationWithHttpInfo(organizationId);
        }

        /// <summary>
        /// Cancels organization by Id and deletes all users 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelOrganizationWithHttpInfo (Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling PartnersApi->CancelOrganization");

            var localVarPath = "/api/partner/organizations/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancels organization by Id and deletes all users 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelOrganizationAsync (Guid? organizationId)
        {
             await CancelOrganizationAsyncWithHttpInfo(organizationId);

        }

        /// <summary>
        /// Cancels organization by Id and deletes all users 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrganizationAsyncWithHttpInfo (Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling PartnersApi->CancelOrganization");

            var localVarPath = "/api/partner/organizations/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetch all organizations 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Guid?&gt;</returns>
        public List<Guid?> FetchAllOrganizations ()
        {
             ApiResponse<List<Guid?>> localVarResponse = FetchAllOrganizationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all organizations 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Guid?&gt;</returns>
        public ApiResponse< List<Guid?> > FetchAllOrganizationsWithHttpInfo ()
        {

            var localVarPath = "/api/partner/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchAllOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Guid?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Guid?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Guid?>)));
        }

        /// <summary>
        /// Fetch all organizations 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Guid?&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid?>> FetchAllOrganizationsAsync ()
        {
             ApiResponse<List<Guid?>> localVarResponse = await FetchAllOrganizationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all organizations 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Guid?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Guid?>>> FetchAllOrganizationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/partner/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchAllOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Guid?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Guid?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Guid?>)));
        }

        /// <summary>
        /// API credentials per organization from organizations owned by partner 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;</returns>
        public Dictionary<string, List<APICredentialsOrganization>> GetApiCredentials ()
        {
             ApiResponse<Dictionary<string, List<APICredentialsOrganization>>> localVarResponse = GetApiCredentialsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// API credentials per organization from organizations owned by partner 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;</returns>
        public ApiResponse< Dictionary<string, List<APICredentialsOrganization>> > GetApiCredentialsWithHttpInfo ()
        {

            var localVarPath = "/api/partner/organizations/apiCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<APICredentialsOrganization>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, List<APICredentialsOrganization>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<APICredentialsOrganization>>)));
        }

        /// <summary>
        /// API credentials per organization from organizations owned by partner 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<APICredentialsOrganization>>> GetApiCredentialsAsync ()
        {
             ApiResponse<Dictionary<string, List<APICredentialsOrganization>>> localVarResponse = await GetApiCredentialsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// API credentials per organization from organizations owned by partner 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;APICredentialsOrganization&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<APICredentialsOrganization>>>> GetApiCredentialsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/partner/organizations/apiCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<APICredentialsOrganization>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, List<APICredentialsOrganization>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<APICredentialsOrganization>>)));
        }

        /// <summary>
        /// Get the organization for the supplied email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>OrganizationDto</returns>
        public OrganizationDto GetOrganizationByUserEmail (string email)
        {
             ApiResponse<OrganizationDto> localVarResponse = GetOrganizationByUserEmailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the organization for the supplied email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of OrganizationDto</returns>
        public ApiResponse< OrganizationDto > GetOrganizationByUserEmailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling PartnersApi->GetOrganizationByUserEmail");

            var localVarPath = "/api/partner/organizationByUserEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationByUserEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationDto)));
        }

        /// <summary>
        /// Get the organization for the supplied email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of OrganizationDto</returns>
        public async System.Threading.Tasks.Task<OrganizationDto> GetOrganizationByUserEmailAsync (string email)
        {
             ApiResponse<OrganizationDto> localVarResponse = await GetOrganizationByUserEmailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the organization for the supplied email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (OrganizationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationDto>> GetOrganizationByUserEmailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling PartnersApi->GetOrganizationByUserEmail");

            var localVarPath = "/api/partner/organizationByUserEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationByUserEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationDto)));
        }

        /// <summary>
        /// Get user id by user email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Guid?</returns>
        public Guid? GetUserIdByEmail (string email)
        {
             ApiResponse<Guid?> localVarResponse = GetUserIdByEmailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user id by user email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > GetUserIdByEmailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling PartnersApi->GetUserIdByEmail");

            var localVarPath = "/api/partner/userIdByEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserIdByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Get user id by user email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> GetUserIdByEmailAsync (string email)
        {
             ApiResponse<Guid?> localVarResponse = await GetUserIdByEmailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user id by user email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> GetUserIdByEmailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling PartnersApi->GetUserIdByEmail");

            var localVarPath = "/api/partner/userIdByEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserIdByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Register a user 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>RegistrationResponse</returns>
        public RegistrationResponse RegisterUser (UserRegistrationRequest request)
        {
             ApiResponse<RegistrationResponse> localVarResponse = RegisterUserWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a user 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of RegistrationResponse</returns>
        public ApiResponse< RegistrationResponse > RegisterUserWithHttpInfo (UserRegistrationRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PartnersApi->RegisterUser");

            var localVarPath = "/api/partner/user/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationResponse)));
        }

        /// <summary>
        /// Register a user 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of RegistrationResponse</returns>
        public async System.Threading.Tasks.Task<RegistrationResponse> RegisterUserAsync (UserRegistrationRequest request)
        {
             ApiResponse<RegistrationResponse> localVarResponse = await RegisterUserAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a user 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (RegistrationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationResponse>> RegisterUserAsyncWithHttpInfo (UserRegistrationRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PartnersApi->RegisterUser");

            var localVarPath = "/api/partner/user/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationResponse)));
        }

    }
}
