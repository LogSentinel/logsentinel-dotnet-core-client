/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerificationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>ConsistencyProof</returns>
        ConsistencyProof GetConsistencyProof (Guid? applicationId, string firstTreeHash, string secondTreeHash = null);

        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>ApiResponse of ConsistencyProof</returns>
        ApiResponse<ConsistencyProof> GetConsistencyProofWithHttpInfo (Guid? applicationId, string firstTreeHash, string secondTreeHash = null);
        /// <summary>
        /// Get all entries between two hashes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        List<AuditLogEntry> GetEntriesBetweenHashes (Guid? applicationId, string endHash, string startHash);

        /// <summary>
        /// Get all entries between two hashes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        ApiResponse<List<AuditLogEntry>> GetEntriesBetweenHashesWithHttpInfo (Guid? applicationId, string endHash, string startHash);
        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>List&lt;EthereumData&gt;</returns>
        List<EthereumData> GetEthereumEntries (Guid? applicationId);

        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>ApiResponse of List&lt;EthereumData&gt;</returns>
        ApiResponse<List<EthereumData>> GetEthereumEntriesWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>InclusionProof</returns>
        InclusionProof GetInclusionProof (Guid? applicationId, string hash);

        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>ApiResponse of InclusionProof</returns>
        ApiResponse<InclusionProof> GetInclusionProofWithHttpInfo (Guid? applicationId, string hash);
        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>TreeHead</returns>
        TreeHead GetLatestTreeHead (Guid? applicationId);

        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of TreeHead</returns>
        ApiResponse<TreeHead> GetLatestTreeHeadWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Get general info about merkle tree parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MerkleTreeInfo</returns>
        MerkleTreeInfo GetMerkleTreeInfo ();

        /// <summary>
        /// Get general info about merkle tree parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MerkleTreeInfo</returns>
        ApiResponse<MerkleTreeInfo> GetMerkleTreeInfoWithHttpInfo ();
        /// <summary>
        /// Get all resolved verification failures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>List&lt;ResolvedVerificationFailureResponse&gt;</returns>
        List<ResolvedVerificationFailureResponse> GetResolvedVerificationFailures (Guid? applicationId);

        /// <summary>
        /// Get all resolved verification failures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of List&lt;ResolvedVerificationFailureResponse&gt;</returns>
        ApiResponse<List<ResolvedVerificationFailureResponse>> GetResolvedVerificationFailuresWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Verification</returns>
        Verification Verify (string applicationId, string hash);

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>ApiResponse of Verification</returns>
        ApiResponse<Verification> VerifyWithHttpInfo (string applicationId, string hash);
        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Verification</returns>
        Verification VerifyEntry (string applicationId, string entryId);

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of Verification</returns>
        ApiResponse<Verification> VerifyEntryWithHttpInfo (string applicationId, string entryId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>Task of ConsistencyProof</returns>
        System.Threading.Tasks.Task<ConsistencyProof> GetConsistencyProofAsync (Guid? applicationId, string firstTreeHash, string secondTreeHash = null);

        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ConsistencyProof)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsistencyProof>> GetConsistencyProofAsyncWithHttpInfo (Guid? applicationId, string firstTreeHash, string secondTreeHash = null);
        /// <summary>
        /// Get all entries between two hashes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        System.Threading.Tasks.Task<List<AuditLogEntry>> GetEntriesBetweenHashesAsync (Guid? applicationId, string endHash, string startHash);

        /// <summary>
        /// Get all entries between two hashes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> GetEntriesBetweenHashesAsyncWithHttpInfo (Guid? applicationId, string endHash, string startHash);
        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>Task of List&lt;EthereumData&gt;</returns>
        System.Threading.Tasks.Task<List<EthereumData>> GetEthereumEntriesAsync (Guid? applicationId);

        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>Task of ApiResponse (List&lt;EthereumData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EthereumData>>> GetEthereumEntriesAsyncWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of InclusionProof</returns>
        System.Threading.Tasks.Task<InclusionProof> GetInclusionProofAsync (Guid? applicationId, string hash);

        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of ApiResponse (InclusionProof)</returns>
        System.Threading.Tasks.Task<ApiResponse<InclusionProof>> GetInclusionProofAsyncWithHttpInfo (Guid? applicationId, string hash);
        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of TreeHead</returns>
        System.Threading.Tasks.Task<TreeHead> GetLatestTreeHeadAsync (Guid? applicationId);

        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (TreeHead)</returns>
        System.Threading.Tasks.Task<ApiResponse<TreeHead>> GetLatestTreeHeadAsyncWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Get general info about merkle tree parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MerkleTreeInfo</returns>
        System.Threading.Tasks.Task<MerkleTreeInfo> GetMerkleTreeInfoAsync ();

        /// <summary>
        /// Get general info about merkle tree parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MerkleTreeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleTreeInfo>> GetMerkleTreeInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Get all resolved verification failures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of List&lt;ResolvedVerificationFailureResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ResolvedVerificationFailureResponse>> GetResolvedVerificationFailuresAsync (Guid? applicationId);

        /// <summary>
        /// Get all resolved verification failures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (List&lt;ResolvedVerificationFailureResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResolvedVerificationFailureResponse>>> GetResolvedVerificationFailuresAsyncWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of Verification</returns>
        System.Threading.Tasks.Task<Verification> VerifyAsync (string applicationId, string hash);

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyAsyncWithHttpInfo (string applicationId, string hash);
        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of Verification</returns>
        System.Threading.Tasks.Task<Verification> VerifyEntryAsync (string applicationId, string entryId);

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyEntryAsyncWithHttpInfo (string applicationId, string entryId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VerificationApi : IVerificationApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerificationApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VerificationApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>ConsistencyProof</returns>
        public ConsistencyProof GetConsistencyProof (Guid? applicationId, string firstTreeHash, string secondTreeHash = null)
        {
             ApiResponse<ConsistencyProof> localVarResponse = GetConsistencyProofWithHttpInfo(applicationId, firstTreeHash, secondTreeHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>ApiResponse of ConsistencyProof</returns>
        public ApiResponse< ConsistencyProof > GetConsistencyProofWithHttpInfo (Guid? applicationId, string firstTreeHash, string secondTreeHash = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetConsistencyProof");
            // verify the required parameter 'firstTreeHash' is set
            if (firstTreeHash == null)
                throw new ApiException(400, "Missing required parameter 'firstTreeHash' when calling VerificationApi->GetConsistencyProof");

            var localVarPath = "./api/verification/merkle/proofs/consistency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstTreeHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstTreeHash", firstTreeHash)); // query parameter
            if (secondTreeHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "secondTreeHash", secondTreeHash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConsistencyProof", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConsistencyProof>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConsistencyProof) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConsistencyProof)));
        }

        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>Task of ConsistencyProof</returns>
        public async System.Threading.Tasks.Task<ConsistencyProof> GetConsistencyProofAsync (Guid? applicationId, string firstTreeHash, string secondTreeHash = null)
        {
             ApiResponse<ConsistencyProof> localVarResponse = await GetConsistencyProofAsyncWithHttpInfo(applicationId, firstTreeHash, secondTreeHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get consistency proof for an application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="firstTreeHash">firstTreeHash</param>
        /// <param name="secondTreeHash">secondTreeHash (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ConsistencyProof)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConsistencyProof>> GetConsistencyProofAsyncWithHttpInfo (Guid? applicationId, string firstTreeHash, string secondTreeHash = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetConsistencyProof");
            // verify the required parameter 'firstTreeHash' is set
            if (firstTreeHash == null)
                throw new ApiException(400, "Missing required parameter 'firstTreeHash' when calling VerificationApi->GetConsistencyProof");

            var localVarPath = "./api/verification/merkle/proofs/consistency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstTreeHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstTreeHash", firstTreeHash)); // query parameter
            if (secondTreeHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "secondTreeHash", secondTreeHash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConsistencyProof", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConsistencyProof>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ConsistencyProof) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConsistencyProof)));
        }

        /// <summary>
        /// Get all entries between two hashes 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        public List<AuditLogEntry> GetEntriesBetweenHashes (Guid? applicationId, string endHash, string startHash)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = GetEntriesBetweenHashesWithHttpInfo(applicationId, endHash, startHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all entries between two hashes 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        public ApiResponse< List<AuditLogEntry> > GetEntriesBetweenHashesWithHttpInfo (Guid? applicationId, string endHash, string startHash)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetEntriesBetweenHashes");
            // verify the required parameter 'endHash' is set
            if (endHash == null)
                throw new ApiException(400, "Missing required parameter 'endHash' when calling VerificationApi->GetEntriesBetweenHashes");
            // verify the required parameter 'startHash' is set
            if (startHash == null)
                throw new ApiException(400, "Missing required parameter 'startHash' when calling VerificationApi->GetEntriesBetweenHashes");

            var localVarPath = "./api/verification/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endHash", endHash)); // query parameter
            if (startHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startHash", startHash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntriesBetweenHashes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Get all entries between two hashes 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuditLogEntry>> GetEntriesBetweenHashesAsync (Guid? applicationId, string endHash, string startHash)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = await GetEntriesBetweenHashesAsyncWithHttpInfo(applicationId, endHash, startHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all entries between two hashes 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="endHash">endHash</param>
        /// <param name="startHash">startHash</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> GetEntriesBetweenHashesAsyncWithHttpInfo (Guid? applicationId, string endHash, string startHash)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetEntriesBetweenHashes");
            // verify the required parameter 'endHash' is set
            if (endHash == null)
                throw new ApiException(400, "Missing required parameter 'endHash' when calling VerificationApi->GetEntriesBetweenHashes");
            // verify the required parameter 'startHash' is set
            if (startHash == null)
                throw new ApiException(400, "Missing required parameter 'startHash' when calling VerificationApi->GetEntriesBetweenHashes");

            var localVarPath = "./api/verification/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endHash", endHash)); // query parameter
            if (startHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startHash", startHash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntriesBetweenHashes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>List&lt;EthereumData&gt;</returns>
        public List<EthereumData> GetEthereumEntries (Guid? applicationId)
        {
             ApiResponse<List<EthereumData>> localVarResponse = GetEthereumEntriesWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>ApiResponse of List&lt;EthereumData&gt;</returns>
        public ApiResponse< List<EthereumData> > GetEthereumEntriesWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetEthereumEntries");

            var localVarPath = "./api/verification/ethereumEntries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEthereumEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EthereumData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EthereumData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EthereumData>)));
        }

        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>Task of List&lt;EthereumData&gt;</returns>
        public async System.Threading.Tasks.Task<List<EthereumData>> GetEthereumEntriesAsync (Guid? applicationId)
        {
             ApiResponse<List<EthereumData>> localVarResponse = await GetEthereumEntriesAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all hashes pushed to Ethereum for a given application 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">applicationId</param>
        /// <returns>Task of ApiResponse (List&lt;EthereumData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EthereumData>>> GetEthereumEntriesAsyncWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetEthereumEntries");

            var localVarPath = "./api/verification/ethereumEntries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEthereumEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EthereumData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EthereumData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EthereumData>)));
        }

        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>InclusionProof</returns>
        public InclusionProof GetInclusionProof (Guid? applicationId, string hash)
        {
             ApiResponse<InclusionProof> localVarResponse = GetInclusionProofWithHttpInfo(applicationId, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>ApiResponse of InclusionProof</returns>
        public ApiResponse< InclusionProof > GetInclusionProofWithHttpInfo (Guid? applicationId, string hash)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetInclusionProof");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling VerificationApi->GetInclusionProof");

            var localVarPath = "./api/verification/merkle/proofs/inclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInclusionProof", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InclusionProof>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InclusionProof) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InclusionProof)));
        }

        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of InclusionProof</returns>
        public async System.Threading.Tasks.Task<InclusionProof> GetInclusionProofAsync (Guid? applicationId, string hash)
        {
             ApiResponse<InclusionProof> localVarResponse = await GetInclusionProofAsyncWithHttpInfo(applicationId, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of ApiResponse (InclusionProof)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InclusionProof>> GetInclusionProofAsyncWithHttpInfo (Guid? applicationId, string hash)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetInclusionProof");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling VerificationApi->GetInclusionProof");

            var localVarPath = "./api/verification/merkle/proofs/inclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInclusionProof", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InclusionProof>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InclusionProof) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InclusionProof)));
        }

        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>TreeHead</returns>
        public TreeHead GetLatestTreeHead (Guid? applicationId)
        {
             ApiResponse<TreeHead> localVarResponse = GetLatestTreeHeadWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of TreeHead</returns>
        public ApiResponse< TreeHead > GetLatestTreeHeadWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetLatestTreeHead");

            var localVarPath = "./api/verification/merkle/latestTreeHead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestTreeHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TreeHead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TreeHead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TreeHead)));
        }

        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of TreeHead</returns>
        public async System.Threading.Tasks.Task<TreeHead> GetLatestTreeHeadAsync (Guid? applicationId)
        {
             ApiResponse<TreeHead> localVarResponse = await GetLatestTreeHeadAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get latest tree head of the application merkle tree. Async operation, as the operation may be slow 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (TreeHead)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TreeHead>> GetLatestTreeHeadAsyncWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetLatestTreeHead");

            var localVarPath = "./api/verification/merkle/latestTreeHead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestTreeHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TreeHead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TreeHead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TreeHead)));
        }

        /// <summary>
        /// Get general info about merkle tree parameters 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MerkleTreeInfo</returns>
        public MerkleTreeInfo GetMerkleTreeInfo ()
        {
             ApiResponse<MerkleTreeInfo> localVarResponse = GetMerkleTreeInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get general info about merkle tree parameters 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MerkleTreeInfo</returns>
        public ApiResponse< MerkleTreeInfo > GetMerkleTreeInfoWithHttpInfo ()
        {

            var localVarPath = "./api/verification/merkle/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMerkleTreeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleTreeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MerkleTreeInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleTreeInfo)));
        }

        /// <summary>
        /// Get general info about merkle tree parameters 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MerkleTreeInfo</returns>
        public async System.Threading.Tasks.Task<MerkleTreeInfo> GetMerkleTreeInfoAsync ()
        {
             ApiResponse<MerkleTreeInfo> localVarResponse = await GetMerkleTreeInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get general info about merkle tree parameters 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MerkleTreeInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleTreeInfo>> GetMerkleTreeInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/verification/merkle/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMerkleTreeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleTreeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MerkleTreeInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleTreeInfo)));
        }

        /// <summary>
        /// Get all resolved verification failures 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>List&lt;ResolvedVerificationFailureResponse&gt;</returns>
        public List<ResolvedVerificationFailureResponse> GetResolvedVerificationFailures (Guid? applicationId)
        {
             ApiResponse<List<ResolvedVerificationFailureResponse>> localVarResponse = GetResolvedVerificationFailuresWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all resolved verification failures 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of List&lt;ResolvedVerificationFailureResponse&gt;</returns>
        public ApiResponse< List<ResolvedVerificationFailureResponse> > GetResolvedVerificationFailuresWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetResolvedVerificationFailures");

            var localVarPath = "./api/verification/resolved-failures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolvedVerificationFailures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResolvedVerificationFailureResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ResolvedVerificationFailureResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResolvedVerificationFailureResponse>)));
        }

        /// <summary>
        /// Get all resolved verification failures 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of List&lt;ResolvedVerificationFailureResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResolvedVerificationFailureResponse>> GetResolvedVerificationFailuresAsync (Guid? applicationId)
        {
             ApiResponse<List<ResolvedVerificationFailureResponse>> localVarResponse = await GetResolvedVerificationFailuresAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all resolved verification failures 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (List&lt;ResolvedVerificationFailureResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResolvedVerificationFailureResponse>>> GetResolvedVerificationFailuresAsyncWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->GetResolvedVerificationFailures");

            var localVarPath = "./api/verification/resolved-failures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolvedVerificationFailures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResolvedVerificationFailureResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ResolvedVerificationFailureResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResolvedVerificationFailureResponse>)));
        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Verification</returns>
        public Verification Verify (string applicationId, string hash)
        {
             ApiResponse<Verification> localVarResponse = VerifyWithHttpInfo(applicationId, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>ApiResponse of Verification</returns>
        public ApiResponse< Verification > VerifyWithHttpInfo (string applicationId, string hash)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->Verify");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling VerificationApi->Verify");

            var localVarPath = "./api/verification/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Verify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Verification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of Verification</returns>
        public async System.Threading.Tasks.Task<Verification> VerifyAsync (string applicationId, string hash)
        {
             ApiResponse<Verification> localVarResponse = await VerifyAsyncWithHttpInfo(applicationId, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyAsyncWithHttpInfo (string applicationId, string hash)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->Verify");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling VerificationApi->Verify");

            var localVarPath = "./api/verification/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Verify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Verification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Verification</returns>
        public Verification VerifyEntry (string applicationId, string entryId)
        {
             ApiResponse<Verification> localVarResponse = VerifyEntryWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of Verification</returns>
        public ApiResponse< Verification > VerifyEntryWithHttpInfo (string applicationId, string entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->VerifyEntry");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling VerificationApi->VerifyEntry");

            var localVarPath = "./api/verification/verifyEntry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Verification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of Verification</returns>
        public async System.Threading.Tasks.Task<Verification> VerifyEntryAsync (string applicationId, string entryId)
        {
             ApiResponse<Verification> localVarResponse = await VerifyEntryAsyncWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyEntryAsyncWithHttpInfo (string applicationId, string entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling VerificationApi->VerifyEntry");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling VerificationApi->VerifyEntry");

            var localVarPath = "./api/verification/verifyEntry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Verification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

    }
}
