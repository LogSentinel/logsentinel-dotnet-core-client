/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGDPRLoggingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Log the consent by a given user
        /// </summary>
        /// <remarks>
        /// Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogConsent (Consent consent, string signature = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log the consent by a given user
        /// </summary>
        /// <remarks>
        /// Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogConsentWithHttpInfo (Consent consent, string signature = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log a GDPR request by a given user
        /// </summary>
        /// <remarks>
        /// Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogGdprRequest (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log a GDPR request by a given user
        /// </summary>
        /// <remarks>
        /// Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogGdprRequestWithHttpInfo (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Push data about the result of a GDPR request
        /// </summary>
        /// <remarks>
        /// Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogRequestResults (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Push data about the result of a GDPR request
        /// </summary>
        /// <remarks>
        /// Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogRequestResultsWithHttpInfo (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Log the consent by a given user
        /// </summary>
        /// <remarks>
        /// Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogConsentAsync (Consent consent, string signature = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log the consent by a given user
        /// </summary>
        /// <remarks>
        /// Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogConsentAsyncWithHttpInfo (Consent consent, string signature = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log a GDPR request by a given user
        /// </summary>
        /// <remarks>
        /// Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogGdprRequestAsync (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log a GDPR request by a given user
        /// </summary>
        /// <remarks>
        /// Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogGdprRequestAsyncWithHttpInfo (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Push data about the result of a GDPR request
        /// </summary>
        /// <remarks>
        /// Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogRequestResultsAsync (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Push data about the result of a GDPR request
        /// </summary>
        /// <remarks>
        /// Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogRequestResultsAsyncWithHttpInfo (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GDPRLoggingApi : IGDPRLoggingApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GDPRLoggingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GDPRLoggingApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GDPRLoggingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GDPRLoggingApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Log the consent by a given user Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogConsent (Consent consent, string signature = null, List<string> encryptedKeywords = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogConsentWithHttpInfo(consent, signature, encryptedKeywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log the consent by a given user Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogConsentWithHttpInfo (Consent consent, string signature = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'consent' is set
            if (consent == null)
                throw new ApiException(400, "Missing required parameter 'consent' when calling GDPRLoggingApi->LogConsent");

            var localVarPath = "./api/log-gdpr/consent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (consent != null && consent.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(consent); // http body (model) parameter
            }
            else
            {
                localVarPostBody = consent; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogConsent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log the consent by a given user Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogConsentAsync (Consent consent, string signature = null, List<string> encryptedKeywords = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogConsentAsyncWithHttpInfo(consent, signature, encryptedKeywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log the consent by a given user Logs GDPR consent. Include any consent-related data (e.g. data subject ID, data subject names, processing activity or any other details). You can also log consent withdrawal (include \&quot;withdrawal\&quot; in the additional details field). 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consent">Details about the consent. You should normally pass the data subject ID and the processing activity for which the consent is given.</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogConsentAsyncWithHttpInfo (Consent consent, string signature = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'consent' is set
            if (consent == null)
                throw new ApiException(400, "Missing required parameter 'consent' when calling GDPRLoggingApi->LogConsent");

            var localVarPath = "./api/log-gdpr/consent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (consent != null && consent.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(consent); // http body (model) parameter
            }
            else
            {
                localVarPostBody = consent; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogConsent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log a GDPR request by a given user Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogGdprRequest (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogGdprRequestWithHttpInfo(gdprRequest, requestType, signature, encryptedKeywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log a GDPR request by a given user Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogGdprRequestWithHttpInfo (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'gdprRequest' is set
            if (gdprRequest == null)
                throw new ApiException(400, "Missing required parameter 'gdprRequest' when calling GDPRLoggingApi->LogGdprRequest");
            // verify the required parameter 'requestType' is set
            if (requestType == null)
                throw new ApiException(400, "Missing required parameter 'requestType' when calling GDPRLoggingApi->LogGdprRequest");

            var localVarPath = "./api/log-gdpr/request/{requestType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestType != null) localVarPathParams.Add("requestType", this.Configuration.ApiClient.ParameterToString(requestType)); // path parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (gdprRequest != null && gdprRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gdprRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gdprRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGdprRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log a GDPR request by a given user Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogGdprRequestAsync (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogGdprRequestAsyncWithHttpInfo(gdprRequest, requestType, signature, encryptedKeywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log a GDPR request by a given user Log a request for data subject rights under GDPR. Include the data subject details as well as any relevant additional details.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gdprRequest">gdprRequest</param>
        /// <param name="requestType">requestType</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogGdprRequestAsyncWithHttpInfo (GDPRRequest gdprRequest, string requestType, string signature = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'gdprRequest' is set
            if (gdprRequest == null)
                throw new ApiException(400, "Missing required parameter 'gdprRequest' when calling GDPRLoggingApi->LogGdprRequest");
            // verify the required parameter 'requestType' is set
            if (requestType == null)
                throw new ApiException(400, "Missing required parameter 'requestType' when calling GDPRLoggingApi->LogGdprRequest");

            var localVarPath = "./api/log-gdpr/request/{requestType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestType != null) localVarPathParams.Add("requestType", this.Configuration.ApiClient.ParameterToString(requestType)); // path parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (gdprRequest != null && gdprRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gdprRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gdprRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGdprRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Push data about the result of a GDPR request Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogRequestResults (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogRequestResultsWithHttpInfo(requestType, result, signature, encryptedKeywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Push data about the result of a GDPR request Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogRequestResultsWithHttpInfo (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'requestType' is set
            if (requestType == null)
                throw new ApiException(400, "Missing required parameter 'requestType' when calling GDPRLoggingApi->LogRequestResults");
            // verify the required parameter 'result' is set
            if (result == null)
                throw new ApiException(400, "Missing required parameter 'result' when calling GDPRLoggingApi->LogRequestResults");

            var localVarPath = "./api/log-gdpr/request-result/{requestType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestType != null) localVarPathParams.Add("requestType", this.Configuration.ApiClient.ParameterToString(requestType)); // path parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (result != null && result.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(result); // http body (model) parameter
            }
            else
            {
                localVarPostBody = result; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogRequestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Push data about the result of a GDPR request Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogRequestResultsAsync (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogRequestResultsAsyncWithHttpInfo(requestType, result, signature, encryptedKeywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Push data about the result of a GDPR request Log the result of handling a GDPR request. E.g. after manually reviewing a request for erasure or for data portability, you should log whether the request was approved and executed or not, including the reasons why.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType">requestType</param>
        /// <param name="result">result</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogRequestResultsAsyncWithHttpInfo (string requestType, Result result, string signature = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'requestType' is set
            if (requestType == null)
                throw new ApiException(400, "Missing required parameter 'requestType' when calling GDPRLoggingApi->LogRequestResults");
            // verify the required parameter 'result' is set
            if (result == null)
                throw new ApiException(400, "Missing required parameter 'result' when calling GDPRLoggingApi->LogRequestResults");

            var localVarPath = "./api/log-gdpr/request-result/{requestType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestType != null) localVarPathParams.Add("requestType", this.Configuration.ApiClient.ParameterToString(requestType)); // path parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (result != null && result.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(result); // http body (model) parameter
            }
            else
            {
                localVarPostBody = result; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogRequestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

    }
}
