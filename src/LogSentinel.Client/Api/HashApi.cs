/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LogSentinel.Client.Client;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHashApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the standalone (non-chained) hash for an entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>string</returns>
        string GetHash (string applicationId, Guid? entryId);

        /// <summary>
        /// Get the standalone (non-chained) hash for an entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetHashWithHttpInfo (string applicationId, Guid? entryId);
        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        string GetHashableContent (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetHashableContentWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);
        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        string GetHashableContentForAuthAction (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetHashableContentForAuthActionWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null);
        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        string GetHashableContentForStandardAction (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetHashableContentForStandardActionWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);
        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        string GetHashableContentSimple (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetHashableContentSimpleWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the standalone (non-chained) hash for an entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetHashAsync (string applicationId, Guid? entryId);

        /// <summary>
        /// Get the standalone (non-chained) hash for an entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetHashAsyncWithHttpInfo (string applicationId, Guid? entryId);
        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetHashableContentAsync (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentAsyncWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);
        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetHashableContentForAuthActionAsync (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentForAuthActionAsyncWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null);
        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetHashableContentForStandardActionAsync (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentForStandardActionAsyncWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);
        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetHashableContentSimpleAsync (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentSimpleAsyncWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HashApi : IHashApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HashApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HashApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HashApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HashApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the standalone (non-chained) hash for an entry 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>string</returns>
        public string GetHash (string applicationId, Guid? entryId)
        {
             ApiResponse<string> localVarResponse = GetHashWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the standalone (non-chained) hash for an entry 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetHashWithHttpInfo (string applicationId, Guid? entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHash");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling HashApi->GetHash");

            var localVarPath = "./api/getStandaloneHash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the standalone (non-chained) hash for an entry 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetHashAsync (string applicationId, Guid? entryId)
        {
             ApiResponse<string> localVarResponse = await GetHashAsyncWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the standalone (non-chained) hash for an entry 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetHashAsyncWithHttpInfo (string applicationId, Guid? entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHash");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling HashApi->GetHash");

            var localVarPath = "./api/getStandaloneHash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        public string GetHashableContent (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = GetHashableContentWithHttpInfo(applicationId, action, actorId, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, details, logLevel, originalEventTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetHashableContentWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContent");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling HashApi->GetHashableContent");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling HashApi->GetHashableContent");

            var localVarPath = "./api/getHashableContent/{actorId}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetHashableContentAsync (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = await GetHashableContentAsyncWithHttpInfo(applicationId, action, actorId, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, details, logLevel, originalEventTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for simple (minimal metadata) actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentAsyncWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContent");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling HashApi->GetHashableContent");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling HashApi->GetHashableContent");

            var localVarPath = "./api/getHashableContent/{actorId}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        public string GetHashableContentForAuthAction (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = GetHashableContentForAuthActionWithHttpInfo(applicationId, actorId, authAction, signature, signedLoginChallenge, userPublicKey, actorDepartment, actorDisplayName, actorRoles, details, originalEventTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetHashableContentForAuthActionWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContentForAuthAction");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling HashApi->GetHashableContentForAuthAction");
            // verify the required parameter 'authAction' is set
            if (authAction == null)
                throw new ApiException(400, "Missing required parameter 'authAction' when calling HashApi->GetHashableContentForAuthAction");

            var localVarPath = "./api/getHashableContent/{actorId}/auth/{authAction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (authAction != null) localVarPathParams.Add("authAction", this.Configuration.ApiClient.ParameterToString(authAction)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (signedLoginChallenge != null) localVarHeaderParams.Add("Signed-Login-Challenge", this.Configuration.ApiClient.ParameterToString(signedLoginChallenge)); // header parameter
            if (userPublicKey != null) localVarHeaderParams.Add("User-Public-Key", this.Configuration.ApiClient.ParameterToString(userPublicKey)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContentForAuthAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetHashableContentForAuthActionAsync (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = await GetHashableContentForAuthActionAsyncWithHttpInfo(applicationId, actorId, authAction, signature, signedLoginChallenge, userPublicKey, actorDepartment, actorDisplayName, actorRoles, details, originalEventTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for auth actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentForAuthActionAsyncWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContentForAuthAction");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling HashApi->GetHashableContentForAuthAction");
            // verify the required parameter 'authAction' is set
            if (authAction == null)
                throw new ApiException(400, "Missing required parameter 'authAction' when calling HashApi->GetHashableContentForAuthAction");

            var localVarPath = "./api/getHashableContent/{actorId}/auth/{authAction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (authAction != null) localVarPathParams.Add("authAction", this.Configuration.ApiClient.ParameterToString(authAction)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (signedLoginChallenge != null) localVarHeaderParams.Add("Signed-Login-Challenge", this.Configuration.ApiClient.ParameterToString(signedLoginChallenge)); // header parameter
            if (userPublicKey != null) localVarHeaderParams.Add("User-Public-Key", this.Configuration.ApiClient.ParameterToString(userPublicKey)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContentForAuthAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        public string GetHashableContentForStandardAction (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = GetHashableContentForStandardActionWithHttpInfo(applicationId, action, actorId, entityId, entityType, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, details, logLevel, originalEventTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetHashableContentForStandardActionWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling HashApi->GetHashableContentForStandardAction");

            var localVarPath = "./api/getHashableContent/{actorId}/{action}/{entityType}/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (entityType != null) localVarPathParams.Add("entityType", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContentForStandardAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetHashableContentForStandardActionAsync (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = await GetHashableContentForStandardActionAsyncWithHttpInfo(applicationId, action, actorId, entityId, entityType, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, details, logLevel, originalEventTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content over which to compute the hash of a request for standard actions 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentForStandardActionAsyncWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling HashApi->GetHashableContentForStandardAction");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling HashApi->GetHashableContentForStandardAction");

            var localVarPath = "./api/getHashableContent/{actorId}/{action}/{entityType}/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (entityType != null) localVarPathParams.Add("entityType", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContentForStandardAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies) 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>string</returns>
        public string GetHashableContentSimple (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = GetHashableContentSimpleWithHttpInfo(applicationId, auditLogEntryType, signature, details, logLevel, originalEventTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies) 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetHashableContentSimpleWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContentSimple");

            var localVarPath = "./api/getHashableContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContentSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies) 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetHashableContentSimpleAsync (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<string> localVarResponse = await GetHashableContentSimpleAsyncWithHttpInfo(applicationId, auditLogEntryType, signature, details, logLevel, originalEventTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content over which to compute the hash of a request without any additional metadata (including encrypted request bodies) 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetHashableContentSimpleAsyncWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, string details = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling HashApi->GetHashableContentSimple");

            var localVarPath = "./api/getHashableContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashableContentSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
