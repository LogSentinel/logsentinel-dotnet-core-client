/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGDPRRegisterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds entitity to the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Guid?</returns>
        Guid? AddEntity (GDPRResponsibleEntity request);

        /// <summary>
        /// Adds entitity to the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> AddEntityWithHttpInfo (GDPRResponsibleEntity request);
        /// <summary>
        /// Deletes entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRResponsibleEntity</returns>
        GDPRResponsibleEntity DeleteEntity (Guid? id);

        /// <summary>
        /// Deletes entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRResponsibleEntity</returns>
        ApiResponse<GDPRResponsibleEntity> DeleteEntityWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes record  from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRRegisterRecord</returns>
        GDPRRegisterRecord DeleteRecord (Guid? id);

        /// <summary>
        /// Deletes record  from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRRegisterRecord</returns>
        ApiResponse<GDPRRegisterRecord> DeleteRecordWithHttpInfo (Guid? id);
        /// <summary>
        /// Fetch entities from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GDPRResponsibleEntity&gt;</returns>
        List<GDPRResponsibleEntity> GdprEntities ();

        /// <summary>
        /// Fetch entities from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GDPRResponsibleEntity&gt;</returns>
        ApiResponse<List<GDPRResponsibleEntity>> GdprEntitiesWithHttpInfo ();
        /// <summary>
        /// Gets entity by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRResponsibleEntity</returns>
        GDPRResponsibleEntity GetEntity (Guid? id);

        /// <summary>
        /// Gets entity by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRResponsibleEntity</returns>
        ApiResponse<GDPRResponsibleEntity> GetEntityWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets record by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRRegisterRecord</returns>
        GDPRRegisterRecord GetRecord (Guid? id);

        /// <summary>
        /// Gets record by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRRegisterRecord</returns>
        ApiResponse<GDPRRegisterRecord> GetRecordWithHttpInfo (Guid? id);
        /// <summary>
        /// Fetch records from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>List&lt;GDPRRegisterRecordDto&gt;</returns>
        List<GDPRRegisterRecordDto> GetRecords (string role, List<string> filterTags = null);

        /// <summary>
        /// Fetch records from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>ApiResponse of List&lt;GDPRRegisterRecordDto&gt;</returns>
        ApiResponse<List<GDPRRegisterRecordDto>> GetRecordsWithHttpInfo (string role, List<string> filterTags = null);
        /// <summary>
        /// Updates entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Guid?</returns>
        Guid? SaveEntity (GDPRResponsibleEntity request);

        /// <summary>
        /// Updates entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> SaveEntityWithHttpInfo (GDPRResponsibleEntity request);
        /// <summary>
        /// Saves record in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>Guid?</returns>
        Guid? SaveRecord (GDPRRegisterRecord record);

        /// <summary>
        /// Saves record in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>ApiResponse of Guid?</returns>
        ApiResponse<Guid?> SaveRecordWithHttpInfo (GDPRRegisterRecord record);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds entitity to the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> AddEntityAsync (GDPRResponsibleEntity request);

        /// <summary>
        /// Adds entitity to the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> AddEntityAsyncWithHttpInfo (GDPRResponsibleEntity request);
        /// <summary>
        /// Deletes entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRResponsibleEntity</returns>
        System.Threading.Tasks.Task<GDPRResponsibleEntity> DeleteEntityAsync (Guid? id);

        /// <summary>
        /// Deletes entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRResponsibleEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<GDPRResponsibleEntity>> DeleteEntityAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes record  from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRRegisterRecord</returns>
        System.Threading.Tasks.Task<GDPRRegisterRecord> DeleteRecordAsync (Guid? id);

        /// <summary>
        /// Deletes record  from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRRegisterRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<GDPRRegisterRecord>> DeleteRecordAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Fetch entities from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GDPRResponsibleEntity&gt;</returns>
        System.Threading.Tasks.Task<List<GDPRResponsibleEntity>> GdprEntitiesAsync ();

        /// <summary>
        /// Fetch entities from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GDPRResponsibleEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GDPRResponsibleEntity>>> GdprEntitiesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets entity by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRResponsibleEntity</returns>
        System.Threading.Tasks.Task<GDPRResponsibleEntity> GetEntityAsync (Guid? id);

        /// <summary>
        /// Gets entity by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRResponsibleEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<GDPRResponsibleEntity>> GetEntityAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Gets record by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRRegisterRecord</returns>
        System.Threading.Tasks.Task<GDPRRegisterRecord> GetRecordAsync (Guid? id);

        /// <summary>
        /// Gets record by id from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRRegisterRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<GDPRRegisterRecord>> GetRecordAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Fetch records from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>Task of List&lt;GDPRRegisterRecordDto&gt;</returns>
        System.Threading.Tasks.Task<List<GDPRRegisterRecordDto>> GetRecordsAsync (string role, List<string> filterTags = null);

        /// <summary>
        /// Fetch records from the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GDPRRegisterRecordDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GDPRRegisterRecordDto>>> GetRecordsAsyncWithHttpInfo (string role, List<string> filterTags = null);
        /// <summary>
        /// Updates entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> SaveEntityAsync (GDPRResponsibleEntity request);

        /// <summary>
        /// Updates entity in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> SaveEntityAsyncWithHttpInfo (GDPRResponsibleEntity request);
        /// <summary>
        /// Saves record in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>Task of Guid?</returns>
        System.Threading.Tasks.Task<Guid?> SaveRecordAsync (GDPRRegisterRecord record);

        /// <summary>
        /// Saves record in the GDPR register
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid?>> SaveRecordAsyncWithHttpInfo (GDPRRegisterRecord record);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GDPRRegisterApi : IGDPRRegisterApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GDPRRegisterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GDPRRegisterApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GDPRRegisterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GDPRRegisterApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds entitity to the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Guid?</returns>
        public Guid? AddEntity (GDPRResponsibleEntity request)
        {
             ApiResponse<Guid?> localVarResponse = AddEntityWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds entitity to the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > AddEntityWithHttpInfo (GDPRResponsibleEntity request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GDPRRegisterApi->AddEntity");

            var localVarPath = "/api/gdpr/addEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Adds entitity to the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> AddEntityAsync (GDPRResponsibleEntity request)
        {
             ApiResponse<Guid?> localVarResponse = await AddEntityAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds entitity to the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> AddEntityAsyncWithHttpInfo (GDPRResponsibleEntity request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GDPRRegisterApi->AddEntity");

            var localVarPath = "/api/gdpr/addEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Deletes entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRResponsibleEntity</returns>
        public GDPRResponsibleEntity DeleteEntity (Guid? id)
        {
             ApiResponse<GDPRResponsibleEntity> localVarResponse = DeleteEntityWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRResponsibleEntity</returns>
        public ApiResponse< GDPRResponsibleEntity > DeleteEntityWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->DeleteEntity");

            var localVarPath = "/api/gdpr/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRResponsibleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRResponsibleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRResponsibleEntity)));
        }

        /// <summary>
        /// Deletes entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRResponsibleEntity</returns>
        public async System.Threading.Tasks.Task<GDPRResponsibleEntity> DeleteEntityAsync (Guid? id)
        {
             ApiResponse<GDPRResponsibleEntity> localVarResponse = await DeleteEntityAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRResponsibleEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GDPRResponsibleEntity>> DeleteEntityAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->DeleteEntity");

            var localVarPath = "/api/gdpr/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRResponsibleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRResponsibleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRResponsibleEntity)));
        }

        /// <summary>
        /// Deletes record  from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRRegisterRecord</returns>
        public GDPRRegisterRecord DeleteRecord (Guid? id)
        {
             ApiResponse<GDPRRegisterRecord> localVarResponse = DeleteRecordWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes record  from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRRegisterRecord</returns>
        public ApiResponse< GDPRRegisterRecord > DeleteRecordWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->DeleteRecord");

            var localVarPath = "/api/gdpr/record";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRRegisterRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRRegisterRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRRegisterRecord)));
        }

        /// <summary>
        /// Deletes record  from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRRegisterRecord</returns>
        public async System.Threading.Tasks.Task<GDPRRegisterRecord> DeleteRecordAsync (Guid? id)
        {
             ApiResponse<GDPRRegisterRecord> localVarResponse = await DeleteRecordAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes record  from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRRegisterRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GDPRRegisterRecord>> DeleteRecordAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->DeleteRecord");

            var localVarPath = "/api/gdpr/record";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRRegisterRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRRegisterRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRRegisterRecord)));
        }

        /// <summary>
        /// Fetch entities from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GDPRResponsibleEntity&gt;</returns>
        public List<GDPRResponsibleEntity> GdprEntities ()
        {
             ApiResponse<List<GDPRResponsibleEntity>> localVarResponse = GdprEntitiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch entities from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GDPRResponsibleEntity&gt;</returns>
        public ApiResponse< List<GDPRResponsibleEntity> > GdprEntitiesWithHttpInfo ()
        {

            var localVarPath = "/api/gdpr/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GdprEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GDPRResponsibleEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GDPRResponsibleEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GDPRResponsibleEntity>)));
        }

        /// <summary>
        /// Fetch entities from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GDPRResponsibleEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<GDPRResponsibleEntity>> GdprEntitiesAsync ()
        {
             ApiResponse<List<GDPRResponsibleEntity>> localVarResponse = await GdprEntitiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch entities from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GDPRResponsibleEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GDPRResponsibleEntity>>> GdprEntitiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/gdpr/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GdprEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GDPRResponsibleEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GDPRResponsibleEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GDPRResponsibleEntity>)));
        }

        /// <summary>
        /// Gets entity by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRResponsibleEntity</returns>
        public GDPRResponsibleEntity GetEntity (Guid? id)
        {
             ApiResponse<GDPRResponsibleEntity> localVarResponse = GetEntityWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets entity by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRResponsibleEntity</returns>
        public ApiResponse< GDPRResponsibleEntity > GetEntityWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->GetEntity");

            var localVarPath = "/api/gdpr/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRResponsibleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRResponsibleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRResponsibleEntity)));
        }

        /// <summary>
        /// Gets entity by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRResponsibleEntity</returns>
        public async System.Threading.Tasks.Task<GDPRResponsibleEntity> GetEntityAsync (Guid? id)
        {
             ApiResponse<GDPRResponsibleEntity> localVarResponse = await GetEntityAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets entity by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRResponsibleEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GDPRResponsibleEntity>> GetEntityAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->GetEntity");

            var localVarPath = "/api/gdpr/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRResponsibleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRResponsibleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRResponsibleEntity)));
        }

        /// <summary>
        /// Gets record by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GDPRRegisterRecord</returns>
        public GDPRRegisterRecord GetRecord (Guid? id)
        {
             ApiResponse<GDPRRegisterRecord> localVarResponse = GetRecordWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets record by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GDPRRegisterRecord</returns>
        public ApiResponse< GDPRRegisterRecord > GetRecordWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->GetRecord");

            var localVarPath = "/api/gdpr/record";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRRegisterRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRRegisterRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRRegisterRecord)));
        }

        /// <summary>
        /// Gets record by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GDPRRegisterRecord</returns>
        public async System.Threading.Tasks.Task<GDPRRegisterRecord> GetRecordAsync (Guid? id)
        {
             ApiResponse<GDPRRegisterRecord> localVarResponse = await GetRecordAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets record by id from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GDPRRegisterRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GDPRRegisterRecord>> GetRecordAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GDPRRegisterApi->GetRecord");

            var localVarPath = "/api/gdpr/record";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GDPRRegisterRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GDPRRegisterRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GDPRRegisterRecord)));
        }

        /// <summary>
        /// Fetch records from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>List&lt;GDPRRegisterRecordDto&gt;</returns>
        public List<GDPRRegisterRecordDto> GetRecords (string role, List<string> filterTags = null)
        {
             ApiResponse<List<GDPRRegisterRecordDto>> localVarResponse = GetRecordsWithHttpInfo(role, filterTags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch records from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>ApiResponse of List&lt;GDPRRegisterRecordDto&gt;</returns>
        public ApiResponse< List<GDPRRegisterRecordDto> > GetRecordsWithHttpInfo (string role, List<string> filterTags = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling GDPRRegisterApi->GetRecords");

            var localVarPath = "/api/gdpr/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filterTags", filterTags)); // query parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GDPRRegisterRecordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GDPRRegisterRecordDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GDPRRegisterRecordDto>)));
        }

        /// <summary>
        /// Fetch records from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>Task of List&lt;GDPRRegisterRecordDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<GDPRRegisterRecordDto>> GetRecordsAsync (string role, List<string> filterTags = null)
        {
             ApiResponse<List<GDPRRegisterRecordDto>> localVarResponse = await GetRecordsAsyncWithHttpInfo(role, filterTags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch records from the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="filterTags">Limit the response by providing specific tags (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GDPRRegisterRecordDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GDPRRegisterRecordDto>>> GetRecordsAsyncWithHttpInfo (string role, List<string> filterTags = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling GDPRRegisterApi->GetRecords");

            var localVarPath = "/api/gdpr/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filterTags", filterTags)); // query parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GDPRRegisterRecordDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GDPRRegisterRecordDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GDPRRegisterRecordDto>)));
        }

        /// <summary>
        /// Updates entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Guid?</returns>
        public Guid? SaveEntity (GDPRResponsibleEntity request)
        {
             ApiResponse<Guid?> localVarResponse = SaveEntityWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > SaveEntityWithHttpInfo (GDPRResponsibleEntity request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GDPRRegisterApi->SaveEntity");

            var localVarPath = "/api/gdpr/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Updates entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> SaveEntityAsync (GDPRResponsibleEntity request)
        {
             ApiResponse<Guid?> localVarResponse = await SaveEntityAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates entity in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> SaveEntityAsyncWithHttpInfo (GDPRResponsibleEntity request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GDPRRegisterApi->SaveEntity");

            var localVarPath = "/api/gdpr/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Saves record in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>Guid?</returns>
        public Guid? SaveRecord (GDPRRegisterRecord record)
        {
             ApiResponse<Guid?> localVarResponse = SaveRecordWithHttpInfo(record);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves record in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>ApiResponse of Guid?</returns>
        public ApiResponse< Guid? > SaveRecordWithHttpInfo (GDPRRegisterRecord record)
        {
            // verify the required parameter 'record' is set
            if (record == null)
                throw new ApiException(400, "Missing required parameter 'record' when calling GDPRRegisterApi->SaveRecord");

            var localVarPath = "/api/gdpr/saveRecord";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (record != null && record.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(record); // http body (model) parameter
            }
            else
            {
                localVarPostBody = record; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

        /// <summary>
        /// Saves record in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>Task of Guid?</returns>
        public async System.Threading.Tasks.Task<Guid?> SaveRecordAsync (GDPRRegisterRecord record)
        {
             ApiResponse<Guid?> localVarResponse = await SaveRecordAsyncWithHttpInfo(record);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves record in the GDPR register 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="record">record</param>
        /// <returns>Task of ApiResponse (Guid?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid?>> SaveRecordAsyncWithHttpInfo (GDPRRegisterRecord record)
        {
            // verify the required parameter 'record' is set
            if (record == null)
                throw new ApiException(400, "Missing required parameter 'record' when calling GDPRRegisterApi->SaveRecord");

            var localVarPath = "/api/gdpr/saveRecord";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (record != null && record.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(record); // http body (model) parameter
            }
            else
            {
                localVarPostBody = record; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Guid?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid?)));
        }

    }
}
