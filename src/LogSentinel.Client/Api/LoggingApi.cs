/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoggingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>AuditLogEntry</returns>
        AuditLogEntry GetEntryById (string applicationId, string entryId);

        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        ApiResponse<AuditLogEntry> GetEntryByIdWithHttpInfo (string applicationId, string entryId);
        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>LogResponse</returns>
        LogResponse GetHashByEntryId (string applicationId, string entryId);

        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> GetHashByEntryIdWithHttpInfo (string applicationId, string entryId);
        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse Log (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogAuthAction (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogAuthActionWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>LogResponse</returns>
        LogResponse LogBatch (string applicationId, List<BatchLogRequestEntry> requestData);

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogBatchWithHttpInfo (string applicationId, List<BatchLogRequestEntry> requestData);
        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogDocument (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogDocumentWithHttpInfo (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogFull (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogFullWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogSimple (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogSimpleWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of AuditLogEntry</returns>
        System.Threading.Tasks.Task<AuditLogEntry> GetEntryByIdAsync (string applicationId, string entryId);

        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetEntryByIdAsyncWithHttpInfo (string applicationId, string entryId);
        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> GetHashByEntryIdAsync (string applicationId, string entryId);

        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> GetHashByEntryIdAsyncWithHttpInfo (string applicationId, string entryId);
        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogAsync (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogAsyncWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogAuthActionAsync (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogAuthActionAsyncWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogBatchAsync (string applicationId, List<BatchLogRequestEntry> requestData);

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogBatchAsyncWithHttpInfo (string applicationId, List<BatchLogRequestEntry> requestData);
        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogDocumentAsync (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogDocumentAsyncWithHttpInfo (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogFullAsync (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogFullAsyncWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null);
        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogSimpleAsync (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null);

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogSimpleAsyncWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoggingApi : ILoggingApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoggingApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoggingApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>AuditLogEntry</returns>
        public AuditLogEntry GetEntryById (string applicationId, string entryId)
        {
             ApiResponse<AuditLogEntry> localVarResponse = GetEntryByIdWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        public ApiResponse< AuditLogEntry > GetEntryByIdWithHttpInfo (string applicationId, string entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->GetEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling LoggingApi->GetEntryById");

            var localVarPath = "/api/getEntryById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of AuditLogEntry</returns>
        public async System.Threading.Tasks.Task<AuditLogEntry> GetEntryByIdAsync (string applicationId, string entryId)
        {
             ApiResponse<AuditLogEntry> localVarResponse = await GetEntryByIdAsyncWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetEntryByIdAsyncWithHttpInfo (string applicationId, string entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->GetEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling LoggingApi->GetEntryById");

            var localVarPath = "/api/getEntryById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>LogResponse</returns>
        public LogResponse GetHashByEntryId (string applicationId, string entryId)
        {
             ApiResponse<LogResponse> localVarResponse = GetHashByEntryIdWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > GetHashByEntryIdWithHttpInfo (string applicationId, string entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->GetHashByEntryId");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling LoggingApi->GetHashByEntryId");

            var localVarPath = "/api/getHashByEntryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashByEntryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> GetHashByEntryIdAsync (string applicationId, string entryId)
        {
             ApiResponse<LogResponse> localVarResponse = await GetHashByEntryIdAsyncWithHttpInfo(applicationId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> GetHashByEntryIdAsyncWithHttpInfo (string applicationId, string entryId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->GetHashByEntryId");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling LoggingApi->GetHashByEntryId");

            var localVarPath = "/api/getHashByEntryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashByEntryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by a given actor Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse Log (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogWithHttpInfo(applicationId, action, actorId, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, originalEventTimestamp, process);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by a given actor Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->Log");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling LoggingApi->Log");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->Log");

            var localVarPath = "/api/log/{actorId}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Log", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by a given actor Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogAsync (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogAsyncWithHttpInfo(applicationId, action, actorId, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, originalEventTimestamp, process);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by a given actor Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogAsyncWithHttpInfo (string applicationId, string action, string actorId, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->Log");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling LoggingApi->Log");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->Log");

            var localVarPath = "/api/log/{actorId}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Log", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogAuthAction (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogAuthActionWithHttpInfo(applicationId, actorId, authAction, signature, signedLoginChallenge, userPublicKey, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, originalEventTimestamp, process);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogAuthActionWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogAuthAction");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->LogAuthAction");
            // verify the required parameter 'authAction' is set
            if (authAction == null)
                throw new ApiException(400, "Missing required parameter 'authAction' when calling LoggingApi->LogAuthAction");

            var localVarPath = "/api/log/{actorId}/auth/{authAction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (authAction != null) localVarPathParams.Add("authAction", this.Configuration.ApiClient.ParameterToString(authAction)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (signedLoginChallenge != null) localVarHeaderParams.Add("Signed-Login-Challenge", this.Configuration.ApiClient.ParameterToString(signedLoginChallenge)); // header parameter
            if (userPublicKey != null) localVarHeaderParams.Add("User-Public-Key", this.Configuration.ApiClient.ParameterToString(userPublicKey)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogAuthAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogAuthActionAsync (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogAuthActionAsyncWithHttpInfo(applicationId, actorId, authAction, signature, signedLoginChallenge, userPublicKey, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, originalEventTimestamp, process);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature Log an authentication action (e.g. login, signup, logout, auto-login).
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogAuthActionAsyncWithHttpInfo (string applicationId, string actorId, string authAction, string signature = null, string signedLoginChallenge = null, string userPublicKey = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogAuthAction");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->LogAuthAction");
            // verify the required parameter 'authAction' is set
            if (authAction == null)
                throw new ApiException(400, "Missing required parameter 'authAction' when calling LoggingApi->LogAuthAction");

            var localVarPath = "/api/log/{actorId}/auth/{authAction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (authAction != null) localVarPathParams.Add("authAction", this.Configuration.ApiClient.ParameterToString(authAction)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (signedLoginChallenge != null) localVarHeaderParams.Add("Signed-Login-Challenge", this.Configuration.ApiClient.ParameterToString(signedLoginChallenge)); // header parameter
            if (userPublicKey != null) localVarHeaderParams.Add("User-Public-Key", this.Configuration.ApiClient.ParameterToString(userPublicKey)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogAuthAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogBatch (string applicationId, List<BatchLogRequestEntry> requestData)
        {
             ApiResponse<LogResponse> localVarResponse = LogBatchWithHttpInfo(applicationId, requestData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogBatchWithHttpInfo (string applicationId, List<BatchLogRequestEntry> requestData)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogBatch");
            // verify the required parameter 'requestData' is set
            if (requestData == null)
                throw new ApiException(400, "Missing required parameter 'requestData' when calling LoggingApi->LogBatch");

            var localVarPath = "/api/log/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (requestData != null && requestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestData; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogBatchAsync (string applicationId, List<BatchLogRequestEntry> requestData)
        {
             ApiResponse<LogResponse> localVarResponse = await LogBatchAsyncWithHttpInfo(applicationId, requestData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="requestData">A list of log requests</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogBatchAsyncWithHttpInfo (string applicationId, List<BatchLogRequestEntry> requestData)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogBatch");
            // verify the required parameter 'requestData' is set
            if (requestData == null)
                throw new ApiException(400, "Missing required parameter 'requestData' when calling LoggingApi->LogBatch");

            var localVarPath = "/api/log/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (requestData != null && requestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestData; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogDocument (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogDocumentWithHttpInfo(applicationId, action, actorId, details, documentId, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, directExternalPush, documentName, documentType, encryptedKeywords, gdprCorrelationKey, originalEventTimestamp, process);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogDocumentWithHttpInfo (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogDocument");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling LoggingApi->LogDocument");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->LogDocument");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling LoggingApi->LogDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling LoggingApi->LogDocument");

            var localVarPath = "/api/log/document/{actorId}/{action}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (documentName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentName", documentName)); // query parameter
            if (documentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentType", documentType)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogDocumentAsync (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogDocumentAsyncWithHttpInfo(applicationId, action, actorId, details, documentId, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, directExternalPush, documentName, documentType, encryptedKeywords, gdprCorrelationKey, originalEventTimestamp, process);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="documentId">documentId</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional, default to true)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="documentName">documentName (optional)</param>
        /// <param name="documentType">documentType (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogDocumentAsyncWithHttpInfo (string applicationId, string action, string actorId, byte[] details, string documentId, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, List<string> directExternalPush = null, string documentName = null, string documentType = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogDocument");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling LoggingApi->LogDocument");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->LogDocument");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling LoggingApi->LogDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling LoggingApi->LogDocument");

            var localVarPath = "/api/log/document/{actorId}/{action}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (documentName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentName", documentName)); // query parameter
            if (documentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentType", documentType)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogFull (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogFullWithHttpInfo(applicationId, action, actorId, entityId, entityType, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, originalEventTimestamp, process);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogFullWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogFull");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling LoggingApi->LogFull");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->LogFull");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling LoggingApi->LogFull");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling LoggingApi->LogFull");

            var localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (entityType != null) localVarPathParams.Add("entityType", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogFullAsync (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogFullAsyncWithHttpInfo(applicationId, action, actorId, entityId, entityType, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, originalEventTimestamp, process);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDepartment">actorDepartment (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <param name="process">process (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogFullAsyncWithHttpInfo (string applicationId, string action, string actorId, string entityId, string entityType, string auditLogEntryType = null, string signature = null, string actorDepartment = null, string actorDisplayName = null, List<string> actorRoles = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string gdprCorrelationKey = null, string logLevel = null, long? originalEventTimestamp = null, string process = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogFull");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling LoggingApi->LogFull");
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling LoggingApi->LogFull");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling LoggingApi->LogFull");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling LoggingApi->LogFull");

            var localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorId != null) localVarPathParams.Add("actorId", this.Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (entityType != null) localVarPathParams.Add("entityType", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (actorDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDepartment", actorDepartment)); // query parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "process", process)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogSimple (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<LogResponse> localVarResponse = LogSimpleWithHttpInfo(applicationId, auditLogEntryType, signature, binaryContent, details, directExternalPush, encryptedKeywords, logLevel, originalEventTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse< LogResponse > LogSimpleWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogSimple");

            var localVarPath = "/api/log/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogSimpleAsync (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null)
        {
             ApiResponse<LogResponse> localVarResponse = await LogSimpleAsyncWithHttpInfo(applicationId, auditLogEntryType, signature, binaryContent, details, directExternalPush, encryptedKeywords, logLevel, originalEventTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document Log an event by just specifying the request body. There are no limitations to the structure of the request body.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="binaryContent">binaryContent (optional)</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log (optional)</param>
        /// <param name="directExternalPush">directExternalPush (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <param name="logLevel">logLevel (optional)</param>
        /// <param name="originalEventTimestamp">originalEventTimestamp (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogSimpleAsyncWithHttpInfo (string applicationId, string auditLogEntryType = null, string signature = null, bool? binaryContent = null, byte[] details = null, List<string> directExternalPush = null, List<string> encryptedKeywords = null, string logLevel = null, long? originalEventTimestamp = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LoggingApi->LogSimple");

            var localVarPath = "/api/log/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (binaryContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryContent", binaryContent)); // query parameter
            if (directExternalPush != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "directExternalPush", directExternalPush)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (originalEventTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalEventTimestamp", originalEventTimestamp)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", this.Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", this.Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

    }
}
