/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Changes user role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>UserDetails</returns>
        UserDetails ChangeRole (string role, Guid? userId);

        /// <summary>
        /// Changes user role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> ChangeRoleWithHttpInfo (string role, Guid? userId);
        /// <summary>
        /// Creates new user in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>UserDetails</returns>
        UserDetails Create (UserRegistrationRequest request);

        /// <summary>
        /// Creates new user in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> CreateWithHttpInfo (UserRegistrationRequest request);
        /// <summary>
        /// Forgets user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>UserDetails</returns>
        UserDetails ForgetUser (Guid? userId);

        /// <summary>
        /// Forgets user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> ForgetUserWithHttpInfo (Guid? userId);
        /// <summary>
        /// Gets user details by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>UserDetails</returns>
        UserDetails GetUserDetailsByEmail (string email);

        /// <summary>
        /// Gets user details by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> GetUserDetailsByEmailWithHttpInfo (string email);
        /// <summary>
        /// Gets user details by user id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>UserDetails</returns>
        UserDetails GetUserDetailsById (Guid? userId);

        /// <summary>
        /// Gets user details by user id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> GetUserDetailsByIdWithHttpInfo (Guid? userId);
        /// <summary>
        /// Updates user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>UserDetails</returns>
        UserDetails Update (UpdateUserRequest request);

        /// <summary>
        /// Updates user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of UserDetails</returns>
        ApiResponse<UserDetails> UpdateWithHttpInfo (UpdateUserRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Changes user role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> ChangeRoleAsync (string role, Guid? userId);

        /// <summary>
        /// Changes user role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> ChangeRoleAsyncWithHttpInfo (string role, Guid? userId);
        /// <summary>
        /// Creates new user in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> CreateAsync (UserRegistrationRequest request);

        /// <summary>
        /// Creates new user in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> CreateAsyncWithHttpInfo (UserRegistrationRequest request);
        /// <summary>
        /// Forgets user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> ForgetUserAsync (Guid? userId);

        /// <summary>
        /// Forgets user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> ForgetUserAsyncWithHttpInfo (Guid? userId);
        /// <summary>
        /// Gets user details by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> GetUserDetailsByEmailAsync (string email);

        /// <summary>
        /// Gets user details by email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetUserDetailsByEmailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Gets user details by user id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> GetUserDetailsByIdAsync (Guid? userId);

        /// <summary>
        /// Gets user details by user id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetUserDetailsByIdAsyncWithHttpInfo (Guid? userId);
        /// <summary>
        /// Updates user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of UserDetails</returns>
        System.Threading.Tasks.Task<UserDetails> UpdateAsync (UpdateUserRequest request);

        /// <summary>
        /// Updates user profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetails>> UpdateAsyncWithHttpInfo (UpdateUserRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationUsersApi : IOrganizationUsersApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationUsersApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationUsersApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Changes user role 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>UserDetails</returns>
        public UserDetails ChangeRole (string role, Guid? userId)
        {
             ApiResponse<UserDetails> localVarResponse = ChangeRoleWithHttpInfo(role, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes user role 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public ApiResponse< UserDetails > ChangeRoleWithHttpInfo (string role, Guid? userId)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling OrganizationUsersApi->ChangeRole");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationUsersApi->ChangeRole");

            var localVarPath = "./api/users/userId/{userId}/changeRole/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Changes user role 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> ChangeRoleAsync (string role, Guid? userId)
        {
             ApiResponse<UserDetails> localVarResponse = await ChangeRoleAsyncWithHttpInfo(role, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes user role 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role</param>
        /// <param name="userId">userId</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetails>> ChangeRoleAsyncWithHttpInfo (string role, Guid? userId)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling OrganizationUsersApi->ChangeRole");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationUsersApi->ChangeRole");

            var localVarPath = "./api/users/userId/{userId}/changeRole/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Creates new user in the organization 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>UserDetails</returns>
        public UserDetails Create (UserRegistrationRequest request)
        {
             ApiResponse<UserDetails> localVarResponse = CreateWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new user in the organization 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public ApiResponse< UserDetails > CreateWithHttpInfo (UserRegistrationRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OrganizationUsersApi->Create");

            var localVarPath = "./api/users/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Creates new user in the organization 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> CreateAsync (UserRegistrationRequest request)
        {
             ApiResponse<UserDetails> localVarResponse = await CreateAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new user in the organization 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetails>> CreateAsyncWithHttpInfo (UserRegistrationRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OrganizationUsersApi->Create");

            var localVarPath = "./api/users/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Forgets user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>UserDetails</returns>
        public UserDetails ForgetUser (Guid? userId)
        {
             ApiResponse<UserDetails> localVarResponse = ForgetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Forgets user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public ApiResponse< UserDetails > ForgetUserWithHttpInfo (Guid? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationUsersApi->ForgetUser");

            var localVarPath = "./api/users/forget/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForgetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Forgets user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> ForgetUserAsync (Guid? userId)
        {
             ApiResponse<UserDetails> localVarResponse = await ForgetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Forgets user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetails>> ForgetUserAsyncWithHttpInfo (Guid? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationUsersApi->ForgetUser");

            var localVarPath = "./api/users/forget/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForgetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Gets user details by email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>UserDetails</returns>
        public UserDetails GetUserDetailsByEmail (string email)
        {
             ApiResponse<UserDetails> localVarResponse = GetUserDetailsByEmailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets user details by email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public ApiResponse< UserDetails > GetUserDetailsByEmailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling OrganizationUsersApi->GetUserDetailsByEmail");

            var localVarPath = "./api/users/email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDetailsByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Gets user details by email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> GetUserDetailsByEmailAsync (string email)
        {
             ApiResponse<UserDetails> localVarResponse = await GetUserDetailsByEmailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets user details by email 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetUserDetailsByEmailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling OrganizationUsersApi->GetUserDetailsByEmail");

            var localVarPath = "./api/users/email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDetailsByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Gets user details by user id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>UserDetails</returns>
        public UserDetails GetUserDetailsById (Guid? userId)
        {
             ApiResponse<UserDetails> localVarResponse = GetUserDetailsByIdWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets user details by user id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public ApiResponse< UserDetails > GetUserDetailsByIdWithHttpInfo (Guid? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationUsersApi->GetUserDetailsById");

            var localVarPath = "./api/users/userId/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Gets user details by user id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> GetUserDetailsByIdAsync (Guid? userId)
        {
             ApiResponse<UserDetails> localVarResponse = await GetUserDetailsByIdAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets user details by user id 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">userId</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetails>> GetUserDetailsByIdAsyncWithHttpInfo (Guid? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrganizationUsersApi->GetUserDetailsById");

            var localVarPath = "./api/users/userId/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Updates user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>UserDetails</returns>
        public UserDetails Update (UpdateUserRequest request)
        {
             ApiResponse<UserDetails> localVarResponse = UpdateWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of UserDetails</returns>
        public ApiResponse< UserDetails > UpdateWithHttpInfo (UpdateUserRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OrganizationUsersApi->Update");

            var localVarPath = "./api/users/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

        /// <summary>
        /// Updates user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of UserDetails</returns>
        public async System.Threading.Tasks.Task<UserDetails> UpdateAsync (UpdateUserRequest request)
        {
             ApiResponse<UserDetails> localVarResponse = await UpdateAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates user profile 
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (UserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDetails>> UpdateAsyncWithHttpInfo (UpdateUserRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling OrganizationUsersApi->Update");

            var localVarPath = "./api/users/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDetails)));
        }

    }
}
