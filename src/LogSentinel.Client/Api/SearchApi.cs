/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LogSentinel.Client.Client;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search entries in batches by field
        /// </summary>
        /// <remarks>
        /// Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        List<AuditLogEntry> GetBatch (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null);

        /// <summary>
        /// Search entries in batches by field
        /// </summary>
        /// <remarks>
        /// Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        ApiResponse<List<AuditLogEntry>> GetBatchWithHttpInfo (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null);
        /// <summary>
        /// Get entity history
        /// </summary>
        /// <remarks>
        /// Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        List<AuditLogEntry> GetEntityHistory (string applicationId, string entityId, string entityType);

        /// <summary>
        /// Get entity history
        /// </summary>
        /// <remarks>
        /// Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        ApiResponse<List<AuditLogEntry>> GetEntityHistoryWithHttpInfo (string applicationId, string entityId, string entityType);
        /// <summary>
        /// Search logged entries
        /// </summary>
        /// <remarks>
        /// Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        List<AuditLogEntry> Search (string applicationId, SearchRequest searchRequest);

        /// <summary>
        /// Search logged entries
        /// </summary>
        /// <remarks>
        /// Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        ApiResponse<List<AuditLogEntry>> SearchWithHttpInfo (string applicationId, SearchRequest searchRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search entries in batches by field
        /// </summary>
        /// <remarks>
        /// Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        System.Threading.Tasks.Task<List<AuditLogEntry>> GetBatchAsync (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null);

        /// <summary>
        /// Search entries in batches by field
        /// </summary>
        /// <remarks>
        /// Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> GetBatchAsyncWithHttpInfo (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null);
        /// <summary>
        /// Get entity history
        /// </summary>
        /// <remarks>
        /// Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        System.Threading.Tasks.Task<List<AuditLogEntry>> GetEntityHistoryAsync (string applicationId, string entityId, string entityType);

        /// <summary>
        /// Get entity history
        /// </summary>
        /// <remarks>
        /// Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> GetEntityHistoryAsyncWithHttpInfo (string applicationId, string entityId, string entityType);
        /// <summary>
        /// Search logged entries
        /// </summary>
        /// <remarks>
        /// Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        System.Threading.Tasks.Task<List<AuditLogEntry>> SearchAsync (string applicationId, SearchRequest searchRequest);

        /// <summary>
        /// Search logged entries
        /// </summary>
        /// <remarks>
        /// Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </remarks>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> SearchAsyncWithHttpInfo (string applicationId, SearchRequest searchRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private LogSentinel.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new LogSentinel.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(LogSentinel.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LogSentinel.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LogSentinel.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LogSentinel.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LogSentinel.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search entries in batches by field Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        public List<AuditLogEntry> GetBatch (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = GetBatchWithHttpInfo(applicationId, field, values, batchSize, entityType, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search entries in batches by field Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        public ApiResponse< List<AuditLogEntry> > GetBatchWithHttpInfo (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SearchApi->GetBatch");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling SearchApi->GetBatch");
            // verify the required parameter 'values' is set
            if (values == null)
                throw new ApiException(400, "Missing required parameter 'values' when calling SearchApi->GetBatch");

            var localVarPath = "./api/search/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (entityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityType", entityType)); // query parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (values != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "values", values)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Search entries in batches by field Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuditLogEntry>> GetBatchAsync (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = await GetBatchAsyncWithHttpInfo(applicationId, field, values, batchSize, entityType, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search entries in batches by field Search entries by specifying a list of actorIds or entityIds. If entityId is specified, entityType should also be specified.
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="field">Field to search in for the supplied values</param>
        /// <param name="values">Values that match the specified field</param>
        /// <param name="batchSize">batchSize (optional, default to 1000)</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here (optional)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> GetBatchAsyncWithHttpInfo (string applicationId, string field, List<string> values, int? batchSize = null, string entityType = null, int? page = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SearchApi->GetBatch");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling SearchApi->GetBatch");
            // verify the required parameter 'values' is set
            if (values == null)
                throw new ApiException(400, "Missing required parameter 'values' when calling SearchApi->GetBatch");

            var localVarPath = "./api/search/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchSize", batchSize)); // query parameter
            if (entityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityType", entityType)); // query parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (values != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "values", values)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Get entity history Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        public List<AuditLogEntry> GetEntityHistory (string applicationId, string entityId, string entityType)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = GetEntityHistoryWithHttpInfo(applicationId, entityId, entityType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get entity history Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        public ApiResponse< List<AuditLogEntry> > GetEntityHistoryWithHttpInfo (string applicationId, string entityId, string entityType)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SearchApi->GetEntityHistory");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling SearchApi->GetEntityHistory");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling SearchApi->GetEntityHistory");

            var localVarPath = "./api/search/entityHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityId", entityId)); // query parameter
            if (entityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityType", entityType)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Get entity history Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuditLogEntry>> GetEntityHistoryAsync (string applicationId, string entityId, string entityType)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = await GetEntityHistoryAsyncWithHttpInfo(applicationId, entityId, entityType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get entity history Fetches all entries related to a specific entity (specified by type and id). Entity modifications can consist of diffs, so that fetching the whole history can be used for reconstructing the current state of the entity
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> GetEntityHistoryAsyncWithHttpInfo (string applicationId, string entityId, string entityType)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SearchApi->GetEntityHistory");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling SearchApi->GetEntityHistory");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling SearchApi->GetEntityHistory");

            var localVarPath = "./api/search/entityHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityId", entityId)); // query parameter
            if (entityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityType", entityType)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Search logged entries Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>List&lt;AuditLogEntry&gt;</returns>
        public List<AuditLogEntry> Search (string applicationId, SearchRequest searchRequest)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = SearchWithHttpInfo(applicationId, searchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search logged entries Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>ApiResponse of List&lt;AuditLogEntry&gt;</returns>
        public ApiResponse< List<AuditLogEntry> > SearchWithHttpInfo (string applicationId, SearchRequest searchRequest)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SearchApi->Search");
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
                throw new ApiException(400, "Missing required parameter 'searchRequest' when calling SearchApi->Search");

            var localVarPath = "./api/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (searchRequest != null && searchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

        /// <summary>
        /// Search logged entries Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>Task of List&lt;AuditLogEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuditLogEntry>> SearchAsync (string applicationId, SearchRequest searchRequest)
        {
             ApiResponse<List<AuditLogEntry>> localVarResponse = await SearchAsyncWithHttpInfo(applicationId, searchRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search logged entries Perform search using a Lucene query. The lucene query syntax can be &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\&quot;&gt;found here&lt;/a&gt;
        /// </summary>
        /// <exception cref="LogSentinel.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="searchRequest">searchRequest</param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuditLogEntry>>> SearchAsyncWithHttpInfo (string applicationId, SearchRequest searchRequest)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SearchApi->Search");
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
                throw new ApiException(400, "Missing required parameter 'searchRequest' when calling SearchApi->Search");

            var localVarPath = "./api/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", this.Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (searchRequest != null && searchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AuditLogEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogEntry>)));
        }

    }
}
