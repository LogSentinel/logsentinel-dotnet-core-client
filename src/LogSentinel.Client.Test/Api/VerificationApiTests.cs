/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using LogSentinel.Client.Client;
using LogSentinel.Client.Api;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Test
{
    /// <summary>
    ///  Class for testing VerificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VerificationApiTests
    {
        private VerificationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VerificationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of VerificationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VerificationApi
            //Assert.IsInstanceOfType(typeof(VerificationApi), instance, "instance is a VerificationApi");
        }

        
        /// <summary>
        /// Test GetConsistencyProof
        /// </summary>
        [Test]
        public void GetConsistencyProofTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? applicationId = null;
            //string firstTreeHash = null;
            //string secondTreeHash = null;
            //var response = instance.GetConsistencyProof(applicationId, firstTreeHash, secondTreeHash);
            //Assert.IsInstanceOf<ConsistencyProof> (response, "response is ConsistencyProof");
        }
        
        /// <summary>
        /// Test GetEntriesBetweenHashes
        /// </summary>
        [Test]
        public void GetEntriesBetweenHashesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? applicationId = null;
            //string endHash = null;
            //string startHash = null;
            //var response = instance.GetEntriesBetweenHashes(applicationId, endHash, startHash);
            //Assert.IsInstanceOf<List<AuditLogEntry>> (response, "response is List<AuditLogEntry>");
        }
        
        /// <summary>
        /// Test GetEthereumEntries
        /// </summary>
        [Test]
        public void GetEthereumEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? applicationId = null;
            //var response = instance.GetEthereumEntries(applicationId);
            //Assert.IsInstanceOf<List<EthereumData>> (response, "response is List<EthereumData>");
        }
        
        /// <summary>
        /// Test GetInclusionProof
        /// </summary>
        [Test]
        public void GetInclusionProofTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? applicationId = null;
            //string hash = null;
            //var response = instance.GetInclusionProof(applicationId, hash);
            //Assert.IsInstanceOf<InclusionProof> (response, "response is InclusionProof");
        }
        
        /// <summary>
        /// Test GetLatestTreeHead
        /// </summary>
        [Test]
        public void GetLatestTreeHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? applicationId = null;
            //var response = instance.GetLatestTreeHead(applicationId);
            //Assert.IsInstanceOf<TreeHead> (response, "response is TreeHead");
        }
        
        /// <summary>
        /// Test GetMerkleTreeInfo
        /// </summary>
        [Test]
        public void GetMerkleTreeInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMerkleTreeInfo();
            //Assert.IsInstanceOf<MerkleTreeInfo> (response, "response is MerkleTreeInfo");
        }
        
        /// <summary>
        /// Test GetResolvedVerificationFailures
        /// </summary>
        [Test]
        public void GetResolvedVerificationFailuresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? applicationId = null;
            //var response = instance.GetResolvedVerificationFailures(applicationId);
            //Assert.IsInstanceOf<List<ResolvedVerificationFailureResponse>> (response, "response is List<ResolvedVerificationFailureResponse>");
        }
        
        /// <summary>
        /// Test Verify
        /// </summary>
        [Test]
        public void VerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string hash = null;
            //var response = instance.Verify(applicationId, hash);
            //Assert.IsInstanceOf<Verification> (response, "response is Verification");
        }
        
        /// <summary>
        /// Test VerifyEntry
        /// </summary>
        [Test]
        public void VerifyEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string entryId = null;
            //var response = instance.VerifyEntry(applicationId, entryId);
            //Assert.IsInstanceOf<Verification> (response, "response is Verification");
        }
        
    }

}
