/* 
 * LogSentinel RESTful API
 *
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using LogSentinel.Client.Client;
using LogSentinel.Client.Api;
using LogSentinel.Client.Model;

namespace LogSentinel.Client.Test
{
    /// <summary>
    ///  Class for testing LoggingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LoggingApiTests
    {
        private LoggingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LoggingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LoggingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LoggingApi
            //Assert.IsInstanceOfType(typeof(LoggingApi), instance, "instance is a LoggingApi");
        }

        
        /// <summary>
        /// Test GetEntryById
        /// </summary>
        [Test]
        public void GetEntryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string entryId = null;
            //var response = instance.GetEntryById(applicationId, entryId);
            //Assert.IsInstanceOf<AuditLogEntry> (response, "response is AuditLogEntry");
        }
        
        /// <summary>
        /// Test GetHashByEntryId
        /// </summary>
        [Test]
        public void GetHashByEntryIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string entryId = null;
            //var response = instance.GetHashByEntryId(applicationId, entryId);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
        /// <summary>
        /// Test Log
        /// </summary>
        [Test]
        public void LogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string action = null;
            //string actorId = null;
            //string auditLogEntryType = null;
            //string signature = null;
            //string actorDepartment = null;
            //string actorDisplayName = null;
            //List<string> actorRoles = null;
            //bool? binaryContent = null;
            //byte[] details = null;
            //List<string> directExternalPush = null;
            //List<string> encryptedKeywords = null;
            //string gdprCorrelationKey = null;
            //string logLevel = null;
            //long? originalEventTimestamp = null;
            //string process = null;
            //var response = instance.Log(applicationId, action, actorId, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, originalEventTimestamp, process);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
        /// <summary>
        /// Test LogAuthAction
        /// </summary>
        [Test]
        public void LogAuthActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string actorId = null;
            //string authAction = null;
            //string signature = null;
            //string signedLoginChallenge = null;
            //string userPublicKey = null;
            //string actorDepartment = null;
            //string actorDisplayName = null;
            //List<string> actorRoles = null;
            //bool? binaryContent = null;
            //byte[] details = null;
            //List<string> directExternalPush = null;
            //List<string> encryptedKeywords = null;
            //string gdprCorrelationKey = null;
            //long? originalEventTimestamp = null;
            //string process = null;
            //var response = instance.LogAuthAction(applicationId, actorId, authAction, signature, signedLoginChallenge, userPublicKey, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, originalEventTimestamp, process);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
        /// <summary>
        /// Test LogBatch
        /// </summary>
        [Test]
        public void LogBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //List<BatchLogRequestEntry> requestData = null;
            //var response = instance.LogBatch(applicationId, requestData);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
        /// <summary>
        /// Test LogDocument
        /// </summary>
        [Test]
        public void LogDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string action = null;
            //string actorId = null;
            //byte[] details = null;
            //string documentId = null;
            //string signature = null;
            //string actorDepartment = null;
            //string actorDisplayName = null;
            //List<string> actorRoles = null;
            //bool? binaryContent = null;
            //List<string> directExternalPush = null;
            //string documentName = null;
            //string documentType = null;
            //List<string> encryptedKeywords = null;
            //string gdprCorrelationKey = null;
            //long? originalEventTimestamp = null;
            //string process = null;
            //var response = instance.LogDocument(applicationId, action, actorId, details, documentId, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, directExternalPush, documentName, documentType, encryptedKeywords, gdprCorrelationKey, originalEventTimestamp, process);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
        /// <summary>
        /// Test LogFull
        /// </summary>
        [Test]
        public void LogFullTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string action = null;
            //string actorId = null;
            //string entityId = null;
            //string entityType = null;
            //string auditLogEntryType = null;
            //string signature = null;
            //string actorDepartment = null;
            //string actorDisplayName = null;
            //List<string> actorRoles = null;
            //bool? binaryContent = null;
            //byte[] details = null;
            //List<string> directExternalPush = null;
            //List<string> encryptedKeywords = null;
            //string gdprCorrelationKey = null;
            //string logLevel = null;
            //long? originalEventTimestamp = null;
            //string process = null;
            //var response = instance.LogFull(applicationId, action, actorId, entityId, entityType, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, originalEventTimestamp, process);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
        /// <summary>
        /// Test LogSimple
        /// </summary>
        [Test]
        public void LogSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string auditLogEntryType = null;
            //string signature = null;
            //bool? binaryContent = null;
            //byte[] details = null;
            //List<string> directExternalPush = null;
            //List<string> encryptedKeywords = null;
            //string logLevel = null;
            //long? originalEventTimestamp = null;
            //var response = instance.LogSimple(applicationId, auditLogEntryType, signature, binaryContent, details, directExternalPush, encryptedKeywords, logLevel, originalEventTimestamp);
            //Assert.IsInstanceOf<LogResponse> (response, "response is LogResponse");
        }
        
    }

}
