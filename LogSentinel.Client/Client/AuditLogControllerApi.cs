/* 
 * LogSentinel RESTful API
 *
 * Read more at https://app.logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using LogSentinel.Client;
using LogSentinel.Client.Auth;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogControllerApi : IApiAccessor
    {
        #region Synchronous Operations


        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>AuditLogEntry</returns>
        AuditLogEntry GetEntryByIdUsingGET1(string entryId, string applicationId);

        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        ApiResponse<AuditLogEntry> GetEntryByIdUsingGET1WithHttpInfo(string entryId, string applicationId);
        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>LogResponse</returns>
        LogResponse GetHashByEntryIdUsingGET1(string entryId, string applicationId);

        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> GetHashByEntryIdUsingGET1WithHttpInfo(string entryId, string applicationId);
        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogAuthActionUsingPOST1(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogAuthActionUsingPOST1WithHttpInfo(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogBatchUsingPOST1(List<BatchLogRequestEntry> requestData, string applicationId);

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogBatchUsingPOST1WithHttpInfo(List<BatchLogRequestEntry> requestData, string applicationId);
        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogFullUsingPOST1(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogFullUsingPOST1WithHttpInfo(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogSimpleUsingPOST1(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogSimpleUsingPOST1WithHttpInfo(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        LogResponse LogUsingPOST1(ActorData actorData, ActionData actionData, string applicationId, string signature = null, string auditLogEntryType = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> LogUsingPOST1WithHttpInfo(string actorId, string action, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Verification</returns>
        Verification VerifyEntryUsingPOST1(string entryId, string applicationId);

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of Verification</returns>
        ApiResponse<Verification> VerifyEntryUsingPOST1WithHttpInfo(string entryId, string applicationId);
        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Verification</returns>
        Verification VerifyUsingPOST1(string hash, string applicationId);

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of Verification</returns>
        ApiResponse<Verification> VerifyUsingPOST1WithHttpInfo(string hash, string applicationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of AuditLogEntry</returns>
        System.Threading.Tasks.Task<AuditLogEntry> GetEntryByIdUsingGET1Async(string entryId, string applicationId);

        /// <summary>
        /// Get entry by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetEntryByIdUsingGET1AsyncWithHttpInfo(string entryId, string applicationId);
        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> GetHashByEntryIdUsingGET1Async(string entryId, string applicationId);

        /// <summary>
        /// getHashByEntryId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> GetHashByEntryIdUsingGET1AsyncWithHttpInfo(string entryId, string applicationId);
        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogAuthActionUsingPOST1Async(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogAuthActionUsingPOST1AsyncWithHttpInfo(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogBatchUsingPOST1Async(List<BatchLogRequestEntry> requestData, string applicationId);

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogBatchUsingPOST1AsyncWithHttpInfo(List<BatchLogRequestEntry> requestData, string applicationId);
        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogFullUsingPOST1Async(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogFullUsingPOST1AsyncWithHttpInfo(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogSimpleUsingPOST1Async(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogSimpleUsingPOST1AsyncWithHttpInfo(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> LogUsingPOST1Async(string actorId, string action, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);

        /// <summary>
        /// Log an event by a given actor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogUsingPOST1AsyncWithHttpInfo(string actorId, string action, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null);
        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of Verification</returns>
        System.Threading.Tasks.Task<Verification> VerifyEntryUsingPOST1Async(string entryId, string applicationId);

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyEntryUsingPOST1AsyncWithHttpInfo(string entryId, string applicationId);
        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of Verification</returns>
        System.Threading.Tasks.Task<Verification> VerifyUsingPOST1Async(string hash, string applicationId);

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyUsingPOST1AsyncWithHttpInfo(string hash, string applicationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditLogControllerApi : IAuditLogControllerApi
    {
        private ApiClient apiClient;
        private BodySerializer bodySerializer;
        private BodySigner bodySigner;
        private JsonBodySerializer jsonBodySerializer;
        private String contentType;
        private EncryptingKeywordExtractor encryptingKeywordExtractor;

        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogControllerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        public AuditLogControllerApi(ApiClient apiClient, BodySerializer bodySerializer,
                             BodySigner bodySigner, String contentType, EncryptingKeywordExtractor encryptingKeywordExtractor)
        {
            this.Configuration = new Configuration { Username = ((HttpBasicAuth)apiClient.authentications["basicAuth"]).getUsername(),
                Password = ((HttpBasicAuth)apiClient.authentications["basicAuth"]).getPassword()
            };
            // this.Configuration = Configuration.Default;
           
            this.apiClient = apiClient;
            this.bodySerializer = bodySerializer;
            this.bodySigner = bodySigner;
            this.contentType = contentType;
            this.jsonBodySerializer = new JsonBodySerializer(apiClient.getJSON());
            this.encryptingKeywordExtractor = encryptingKeywordExtractor;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogControllerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>AuditLogEntry</returns>
        public AuditLogEntry GetEntryByIdUsingGET1(string entryId, string applicationId)
        {
            ApiResponse<AuditLogEntry> localVarResponse = GetEntryByIdUsingGET1WithHttpInfo(entryId, applicationId);
            return localVarResponse.Data;
        }
        
        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        public ApiResponse<AuditLogEntry> GetEntryByIdUsingGET1WithHttpInfo(string entryId, string applicationId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AuditLogControllerApi->GetEntryByIdUsingGET1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->GetEntryByIdUsingGET1");

            var localVarPath = "/api/getEntryById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntryByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntry)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of AuditLogEntry</returns>
        public async System.Threading.Tasks.Task<AuditLogEntry> GetEntryByIdUsingGET1Async(string entryId, string applicationId)
        {
            ApiResponse<AuditLogEntry> localVarResponse = await GetEntryByIdUsingGET1AsyncWithHttpInfo(entryId, applicationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get entry by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetEntryByIdUsingGET1AsyncWithHttpInfo(string entryId, string applicationId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AuditLogControllerApi->GetEntryByIdUsingGET1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->GetEntryByIdUsingGET1");

            var localVarPath = "/api/getEntryById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntryByIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntry)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>LogResponse</returns>
        public LogResponse GetHashByEntryIdUsingGET1(string entryId, string applicationId)
        {
            ApiResponse<LogResponse> localVarResponse = GetHashByEntryIdUsingGET1WithHttpInfo(entryId, applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> GetHashByEntryIdUsingGET1WithHttpInfo(string entryId, string applicationId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AuditLogControllerApi->GetHashByEntryIdUsingGET1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->GetHashByEntryIdUsingGET1");

            var localVarPath = "/api/getHashByEntryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashByEntryIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> GetHashByEntryIdUsingGET1Async(string entryId, string applicationId)
        {
            ApiResponse<LogResponse> localVarResponse = await GetHashByEntryIdUsingGET1AsyncWithHttpInfo(entryId, applicationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// getHashByEntryId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> GetHashByEntryIdUsingGET1AsyncWithHttpInfo(string entryId, string applicationId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AuditLogControllerApi->GetHashByEntryIdUsingGET1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->GetHashByEntryIdUsingGET1");

            var localVarPath = "/api/getHashByEntryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHashByEntryIdUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogAuthActionUsingPOST1(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = LogAuthActionUsingPOST1WithHttpInfo(actorId, authAction, details, applicationId, signedLoginChallenge, userPublicKey, signature, actorDisplayName, actorRoles, gdprCorrelationKey, encryptedKeywords);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> LogAuthActionUsingPOST1WithHttpInfo(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");
            // verify the required parameter 'authAction' is set
            if (authAction == null)
                throw new ApiException(400, "Missing required parameter 'authAction' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");

            var localVarPath = "/api/log/{actorId}/auth/{authAction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (authAction != null) localVarPathParams.Add("authAction", Configuration.ApiClient.ParameterToString(authAction)); // path parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signedLoginChallenge != null) localVarHeaderParams.Add("Signed-Login-Challenge", Configuration.ApiClient.ParameterToString(signedLoginChallenge)); // header parameter
            if (userPublicKey != null) localVarHeaderParams.Add("User-Public-Key", Configuration.ApiClient.ParameterToString(userPublicKey)); // header parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogAuthActionUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogAuthActionUsingPOST1Async(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = await LogAuthActionUsingPOST1AsyncWithHttpInfo(actorId, authAction, details, applicationId, signedLoginChallenge, userPublicKey, signature, actorDisplayName, actorRoles, gdprCorrelationKey, encryptedKeywords);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Log an authentication event with the option to pass actor public key and signature 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="authAction">Specific action related to user authentication</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signedLoginChallenge">Signed-Login-Challenge (optional)</param>
        /// <param name="userPublicKey">User-Public-Key (optional)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogAuthActionUsingPOST1AsyncWithHttpInfo(string actorId, string authAction, string details, string applicationId, string signedLoginChallenge = null, string userPublicKey = null, string signature = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");
            // verify the required parameter 'authAction' is set
            if (authAction == null)
                throw new ApiException(400, "Missing required parameter 'authAction' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogAuthActionUsingPOST1");

            var localVarPath = "/api/log/{actorId}/auth/{authAction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (authAction != null) localVarPathParams.Add("authAction", Configuration.ApiClient.ParameterToString(authAction)); // path parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (signedLoginChallenge != null) localVarHeaderParams.Add("Signed-Login-Challenge", Configuration.ApiClient.ParameterToString(signedLoginChallenge)); // header parameter
            if (userPublicKey != null) localVarHeaderParams.Add("User-Public-Key", Configuration.ApiClient.ParameterToString(userPublicKey)); // header parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogAuthActionUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogBatchUsingPOST1(List<BatchLogRequestEntry> requestData, string applicationId)
        {
            ApiResponse<LogResponse> localVarResponse = LogBatchUsingPOST1WithHttpInfo(requestData, applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> LogBatchUsingPOST1WithHttpInfo(List<BatchLogRequestEntry> requestData, string applicationId)
        {
            // verify the required parameter 'requestData' is set
            if (requestData == null)
                throw new ApiException(400, "Missing required parameter 'requestData' when calling AuditLogControllerApi->LogBatchUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogBatchUsingPOST1");

            var localVarPath = "/api/log/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (requestData != null && requestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestData; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogBatchUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogBatchUsingPOST1Async(List<BatchLogRequestEntry> requestData, string applicationId)
        {
            ApiResponse<LogResponse> localVarResponse = await LogBatchUsingPOST1AsyncWithHttpInfo(requestData, applicationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestData">A list of log requests</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogBatchUsingPOST1AsyncWithHttpInfo(List<BatchLogRequestEntry> requestData, string applicationId)
        {
            // verify the required parameter 'requestData' is set
            if (requestData == null)
                throw new ApiException(400, "Missing required parameter 'requestData' when calling AuditLogControllerApi->LogBatchUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogBatchUsingPOST1");

            var localVarPath = "/api/log/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (requestData != null && requestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestData; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogBatchUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogFullUsingPOST1(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = LogFullUsingPOST1WithHttpInfo(actorId, action, entityType, entityId, details, applicationId, signature, auditLogEntryType, actorDisplayName, actorRoles, gdprCorrelationKey, encryptedKeywords);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> LogFullUsingPOST1WithHttpInfo(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogFullUsingPOST1");

            var localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (action != null) localVarPathParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (entityType != null) localVarPathParams.Add("entityType", Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogFullUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogFullUsingPOST1Async(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = await LogFullUsingPOST1AsyncWithHttpInfo(actorId, action, entityType, entityId, details, applicationId, signature, auditLogEntryType, actorDisplayName, actorRoles, gdprCorrelationKey, encryptedKeywords);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="entityType">When the event is about a particular model entity, you can set its type here</param>
        /// <param name="entityId">When the event is about a particular model entity, you can set its ID here</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogFullUsingPOST1AsyncWithHttpInfo(string actorId, string action, string entityType, string entityId, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogFullUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogFullUsingPOST1");

            var localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (action != null) localVarPathParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (entityType != null) localVarPathParams.Add("entityType", Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityId != null) localVarPathParams.Add("entityId", Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogFullUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogSimpleUsingPOST1(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = LogSimpleUsingPOST1WithHttpInfo(details, applicationId, signature, auditLogEntryType, encryptedKeywords);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> LogSimpleUsingPOST1WithHttpInfo(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogSimpleUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogSimpleUsingPOST1");

            var localVarPath = "/api/log/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogSimpleUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogSimpleUsingPOST1Async(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = await LogSimpleUsingPOST1AsyncWithHttpInfo(details, applicationId, signature, auditLogEntryType, encryptedKeywords);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogSimpleUsingPOST1AsyncWithHttpInfo(string details, string applicationId, string signature = null, string auditLogEntryType = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogSimpleUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogSimpleUsingPOST1");

            var localVarPath = "/api/log/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogSimpleUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by a given actor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>LogResponse</returns>
        public LogResponse LogUsingPOST1(ActorData actorData, ActionData actionData, string applicationId, string signature = null, string auditLogEntryType = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {

            ApiResponse<LogResponse> localVarResponse = LogUsingPOST1WithHttpInfo(actorData.ActorId, actionData.Action, actionData.Details, applicationId, signature, auditLogEntryType, actorData.ActorDisplayName, actorData.ActorRoles, gdprCorrelationKey, encryptedKeywords);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log an event by a given actor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> LogUsingPOST1WithHttpInfo(string actorId, string action, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling AuditLogControllerApi->LogUsingPOST1");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling AuditLogControllerApi->LogUsingPOST1");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogUsingPOST1");

            var localVarPath = "/api/log/{actorId}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", Configuration.ApiClient.ParameterToString(actorId)); // path parameter

            if (action != null) localVarPathParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Log an event by a given actor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> LogUsingPOST1Async(string actorId, string action, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            ApiResponse<LogResponse> localVarResponse = await LogUsingPOST1AsyncWithHttpInfo(actorId, action, details, applicationId, signature, auditLogEntryType, actorDisplayName, actorRoles, gdprCorrelationKey, encryptedKeywords);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Log an event by a given actor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actorId">ID of the actor performing the action being logged</param>
        /// <param name="action">The name of the action being logged</param>
        /// <param name="details">Any details in any format about the event that you want to store in the log</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <param name="signature">Base64-encoded digital signature on the entry details (the request body) (optional)</param>
        /// <param name="auditLogEntryType">The type of the event (optional, default to BUSINESS_LOGIC_ENTRY)</param>
        /// <param name="actorDisplayName">Display name of the actor (e.g. a name, in case ID is not human-readable) (optional)</param>
        /// <param name="actorRoles">The roles of the actor (optional)</param>
        /// <param name="gdprCorrelationKey">If the event is about GDPR-related action, you can correlate it with a process in the GDPR register (optional)</param>
        /// <param name="encryptedKeywords">If you are encrypting the parameters in your request, you can extract and encrypt keywords client-side and send them to us in order to make use of our search functionality over encrypted text (optional)</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> LogUsingPOST1AsyncWithHttpInfo(string actorId, string action, string details, string applicationId, string signature = null, string auditLogEntryType = null, string actorDisplayName = null, List<string> actorRoles = null, string gdprCorrelationKey = null, List<string> encryptedKeywords = null)
        {
            // verify the required parameter 'actorId' is set
            if (actorId == null)
                throw new ApiException(400, "Missing required parameter 'actorId' when calling AuditLogControllerApi->LogUsingPOST1");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling AuditLogControllerApi->LogUsingPOST1");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling AuditLogControllerApi->LogUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->LogUsingPOST1");

            var localVarPath = "/api/log/{actorId}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actorId != null) localVarPathParams.Add("actorId", Configuration.ApiClient.ParameterToString(actorId)); // path parameter
            if (action != null) localVarPathParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (actorDisplayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "actorDisplayName", actorDisplayName)); // query parameter
            if (actorRoles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actorRoles", actorRoles)); // query parameter
            if (gdprCorrelationKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "gdprCorrelationKey", gdprCorrelationKey)); // query parameter
            if (encryptedKeywords != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "encryptedKeywords", encryptedKeywords)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter
            if (signature != null) localVarHeaderParams.Add("Signature", Configuration.ApiClient.ParameterToString(signature)); // header parameter
            if (auditLogEntryType != null) localVarHeaderParams.Add("Audit-Log-Entry-Type", Configuration.ApiClient.ParameterToString(auditLogEntryType)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Verification</returns>
        public Verification VerifyEntryUsingPOST1(string entryId, string applicationId)
        {
            ApiResponse<Verification> localVarResponse = VerifyEntryUsingPOST1WithHttpInfo(entryId, applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of Verification</returns>
        public ApiResponse<Verification> VerifyEntryUsingPOST1WithHttpInfo(string entryId, string applicationId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AuditLogControllerApi->VerifyEntryUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->VerifyEntryUsingPOST1");

            var localVarPath = "/api/verifyEntry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEntryUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Verification)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of Verification</returns>
        public async System.Threading.Tasks.Task<Verification> VerifyEntryUsingPOST1Async(string entryId, string applicationId)
        {
            ApiResponse<Verification> localVarResponse = await VerifyEntryUsingPOST1AsyncWithHttpInfo(entryId, applicationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Verify whether a given entry&#39;s hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entryId">ID of the audit log entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyEntryUsingPOST1AsyncWithHttpInfo(string entryId, string applicationId)
        {
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AuditLogControllerApi->VerifyEntryUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->VerifyEntryUsingPOST1");

            var localVarPath = "/api/verifyEntry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entryId", entryId)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEntryUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Verification)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Verification</returns>
        public Verification VerifyUsingPOST1(string hash, string applicationId)
        {
            ApiResponse<Verification> localVarResponse = VerifyUsingPOST1WithHttpInfo(hash, applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>ApiResponse of Verification</returns>
        public ApiResponse<Verification> VerifyUsingPOST1WithHttpInfo(string hash, string applicationId)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling AuditLogControllerApi->VerifyUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->VerifyUsingPOST1");

            var localVarPath = "/api/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Verification)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of Verification</returns>
        public async System.Threading.Tasks.Task<Verification> VerifyUsingPOST1Async(string hash, string applicationId)
        {
            ApiResponse<Verification> localVarResponse = await VerifyUsingPOST1AsyncWithHttpInfo(hash, applicationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Verify whether a given hash is present, indicating that the log is intact 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Hash of the entry to verify</param>
        /// <param name="applicationId">Application ID, identifying a target application (obtained from the API credentials page)</param>
        /// <returns>Task of ApiResponse (Verification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Verification>> VerifyUsingPOST1AsyncWithHttpInfo(string hash, string applicationId)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling AuditLogControllerApi->VerifyUsingPOST1");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling AuditLogControllerApi->VerifyUsingPOST1");

            var localVarPath = "/api/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (applicationId != null) localVarHeaderParams.Add("Application-Id", Configuration.ApiClient.ParameterToString(applicationId)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Verification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Verification)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Verification)));
        }
    }
}
