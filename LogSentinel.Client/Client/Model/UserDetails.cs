/* 
 * LogSentinel RESTful API
 *
 * Read more at https://app.logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// UserDetails
    /// </summary>
    [DataContract]
    public partial class UserDetails :  IEquatable<UserDetails>, IValidatableObject
    {
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum EN for value: EN
            /// </summary>
            [EnumMember(Value = "EN")]
            EN = 1,
            
            /// <summary>
            /// Enum BG for value: BG
            /// </summary>
            [EnumMember(Value = "BG")]
            BG = 2
        }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Defines OrganizationRole
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrganizationRoleEnum
        {
            
            /// <summary>
            /// Enum ADMIN for value: ADMIN
            /// </summary>
            [EnumMember(Value = "ADMIN")]
            ADMIN = 1,
            
            /// <summary>
            /// Enum AUDITOR for value: AUDITOR
            /// </summary>
            [EnumMember(Value = "AUDITOR")]
            AUDITOR = 2,
            
            /// <summary>
            /// Enum DEVELOPER for value: DEVELOPER
            /// </summary>
            [EnumMember(Value = "DEVELOPER")]
            DEVELOPER = 3,
            
            /// <summary>
            /// Enum MANAGER for value: MANAGER
            /// </summary>
            [EnumMember(Value = "MANAGER")]
            MANAGER = 4
        }

        /// <summary>
        /// Gets or Sets OrganizationRole
        /// </summary>
        [DataMember(Name="organizationRole", EmitDefaultValue=false)]
        public OrganizationRoleEnum? OrganizationRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDetails" /> class.
        /// </summary>
        /// <param name="Admin">Admin.</param>
        /// <param name="Created">Created.</param>
        /// <param name="DefaultApplicationId">DefaultApplicationId.</param>
        /// <param name="DefaultApplicationName">DefaultApplicationName.</param>
        /// <param name="Email">Email.</param>
        /// <param name="HasPassword">HasPassword.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Language">Language.</param>
        /// <param name="Names">Names.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="OrganizationName">OrganizationName.</param>
        /// <param name="OrganizationRole">OrganizationRole.</param>
        /// <param name="Position">Position.</param>
        /// <param name="ProfilePicturePath">ProfilePicturePath.</param>
        /// <param name="Timezone">Timezone.</param>
        /// <param name="TwoFactorAuthEnabled">TwoFactorAuthEnabled.</param>
        /// <param name="TwoFactorAuthKey">TwoFactorAuthKey.</param>
        /// <param name="WhitelabelStyling">WhitelabelStyling.</param>
        public UserDetails(bool? Admin = default(bool?), DateTime? Created = default(DateTime?), string DefaultApplicationId = default(string), string DefaultApplicationName = default(string), string Email = default(string), bool? HasPassword = default(bool?), string Id = default(string), LanguageEnum? Language = default(LanguageEnum?), string Names = default(string), string OrganizationId = default(string), string OrganizationName = default(string), OrganizationRoleEnum? OrganizationRole = default(OrganizationRoleEnum?), string Position = default(string), string ProfilePicturePath = default(string), string Timezone = default(string), bool? TwoFactorAuthEnabled = default(bool?), string TwoFactorAuthKey = default(string), WhitelabelStyling WhitelabelStyling = default(WhitelabelStyling))
        {
            this.Admin = Admin;
            this.Created = Created;
            this.DefaultApplicationId = DefaultApplicationId;
            this.DefaultApplicationName = DefaultApplicationName;
            this.Email = Email;
            this.HasPassword = HasPassword;
            this.Id = Id;
            this.Language = Language;
            this.Names = Names;
            this.OrganizationId = OrganizationId;
            this.OrganizationName = OrganizationName;
            this.OrganizationRole = OrganizationRole;
            this.Position = Position;
            this.ProfilePicturePath = ProfilePicturePath;
            this.Timezone = Timezone;
            this.TwoFactorAuthEnabled = TwoFactorAuthEnabled;
            this.TwoFactorAuthKey = TwoFactorAuthKey;
            this.WhitelabelStyling = WhitelabelStyling;
        }
        
        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public bool? Admin { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets DefaultApplicationId
        /// </summary>
        [DataMember(Name="defaultApplicationId", EmitDefaultValue=false)]
        public string DefaultApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultApplicationName
        /// </summary>
        [DataMember(Name="defaultApplicationName", EmitDefaultValue=false)]
        public string DefaultApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets HasPassword
        /// </summary>
        [DataMember(Name="hasPassword", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets Names
        /// </summary>
        [DataMember(Name="names", EmitDefaultValue=false)]
        public string Names { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name="organizationName", EmitDefaultValue=false)]
        public string OrganizationName { get; set; }


        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicturePath
        /// </summary>
        [DataMember(Name="profilePicturePath", EmitDefaultValue=false)]
        public string ProfilePicturePath { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthEnabled
        /// </summary>
        [DataMember(Name="twoFactorAuthEnabled", EmitDefaultValue=false)]
        public bool? TwoFactorAuthEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorAuthKey
        /// </summary>
        [DataMember(Name="twoFactorAuthKey", EmitDefaultValue=false)]
        public string TwoFactorAuthKey { get; set; }

        /// <summary>
        /// Gets or Sets WhitelabelStyling
        /// </summary>
        [DataMember(Name="whitelabelStyling", EmitDefaultValue=false)]
        public WhitelabelStyling WhitelabelStyling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDetails {\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DefaultApplicationId: ").Append(DefaultApplicationId).Append("\n");
            sb.Append("  DefaultApplicationName: ").Append(DefaultApplicationName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  OrganizationRole: ").Append(OrganizationRole).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ProfilePicturePath: ").Append(ProfilePicturePath).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  TwoFactorAuthEnabled: ").Append(TwoFactorAuthEnabled).Append("\n");
            sb.Append("  TwoFactorAuthKey: ").Append(TwoFactorAuthKey).Append("\n");
            sb.Append("  WhitelabelStyling: ").Append(WhitelabelStyling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDetails);
        }

        /// <summary>
        /// Returns true if UserDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DefaultApplicationId == input.DefaultApplicationId ||
                    (this.DefaultApplicationId != null &&
                    this.DefaultApplicationId.Equals(input.DefaultApplicationId))
                ) && 
                (
                    this.DefaultApplicationName == input.DefaultApplicationName ||
                    (this.DefaultApplicationName != null &&
                    this.DefaultApplicationName.Equals(input.DefaultApplicationName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    (this.HasPassword != null &&
                    this.HasPassword.Equals(input.HasPassword))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Names == input.Names ||
                    (this.Names != null &&
                    this.Names.Equals(input.Names))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.OrganizationRole == input.OrganizationRole ||
                    (this.OrganizationRole != null &&
                    this.OrganizationRole.Equals(input.OrganizationRole))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.ProfilePicturePath == input.ProfilePicturePath ||
                    (this.ProfilePicturePath != null &&
                    this.ProfilePicturePath.Equals(input.ProfilePicturePath))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.TwoFactorAuthEnabled == input.TwoFactorAuthEnabled ||
                    (this.TwoFactorAuthEnabled != null &&
                    this.TwoFactorAuthEnabled.Equals(input.TwoFactorAuthEnabled))
                ) && 
                (
                    this.TwoFactorAuthKey == input.TwoFactorAuthKey ||
                    (this.TwoFactorAuthKey != null &&
                    this.TwoFactorAuthKey.Equals(input.TwoFactorAuthKey))
                ) && 
                (
                    this.WhitelabelStyling == input.WhitelabelStyling ||
                    (this.WhitelabelStyling != null &&
                    this.WhitelabelStyling.Equals(input.WhitelabelStyling))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DefaultApplicationId != null)
                    hashCode = hashCode * 59 + this.DefaultApplicationId.GetHashCode();
                if (this.DefaultApplicationName != null)
                    hashCode = hashCode * 59 + this.DefaultApplicationName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.HasPassword != null)
                    hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Names != null)
                    hashCode = hashCode * 59 + this.Names.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.OrganizationName != null)
                    hashCode = hashCode * 59 + this.OrganizationName.GetHashCode();
                if (this.OrganizationRole != null)
                    hashCode = hashCode * 59 + this.OrganizationRole.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ProfilePicturePath != null)
                    hashCode = hashCode * 59 + this.ProfilePicturePath.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.TwoFactorAuthEnabled != null)
                    hashCode = hashCode * 59 + this.TwoFactorAuthEnabled.GetHashCode();
                if (this.TwoFactorAuthKey != null)
                    hashCode = hashCode * 59 + this.TwoFactorAuthKey.GetHashCode();
                if (this.WhitelabelStyling != null)
                    hashCode = hashCode * 59 + this.WhitelabelStyling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
