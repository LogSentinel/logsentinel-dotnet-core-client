/* 
 * LogSentinel RESTful API
 *
 * Read more at https://app.logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// BatchLogRequestEntry
    /// </summary>
    [DataContract]
    public partial class BatchLogRequestEntry :  IEquatable<BatchLogRequestEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchLogRequestEntry" /> class.
        /// </summary>
        /// <param name="ActionData">ActionData.</param>
        /// <param name="ActorData">ActorData.</param>
        /// <param name="AdditionalParams">AdditionalParams.</param>
        /// <param name="EncryptedKeywords">EncryptedKeywords.</param>
        /// <param name="Signature">Signature.</param>
        public BatchLogRequestEntry(ActionData ActionData = default(ActionData), ActorData ActorData = default(ActorData), Dictionary<string, string> AdditionalParams = default(Dictionary<string, string>), string EncryptedKeywords = default(string), string Signature = default(string))
        {
            this.ActionData = ActionData;
            this.ActorData = ActorData;
            this.AdditionalParams = AdditionalParams;
            this.EncryptedKeywords = EncryptedKeywords;
            this.Signature = Signature;
        }
        
        /// <summary>
        /// Gets or Sets ActionData
        /// </summary>
        [DataMember(Name="actionData", EmitDefaultValue=false)]
        public ActionData ActionData { get; set; }

        /// <summary>
        /// Gets or Sets ActorData
        /// </summary>
        [DataMember(Name="actorData", EmitDefaultValue=false)]
        public ActorData ActorData { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalParams
        /// </summary>
        [DataMember(Name="additionalParams", EmitDefaultValue=false)]
        public Dictionary<string, string> AdditionalParams { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedKeywords
        /// </summary>
        [DataMember(Name="encryptedKeywords", EmitDefaultValue=false)]
        public string EncryptedKeywords { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchLogRequestEntry {\n");
            sb.Append("  ActionData: ").Append(ActionData).Append("\n");
            sb.Append("  ActorData: ").Append(ActorData).Append("\n");
            sb.Append("  AdditionalParams: ").Append(AdditionalParams).Append("\n");
            sb.Append("  EncryptedKeywords: ").Append(EncryptedKeywords).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchLogRequestEntry);
        }

        /// <summary>
        /// Returns true if BatchLogRequestEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchLogRequestEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchLogRequestEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionData == input.ActionData ||
                    (this.ActionData != null &&
                    this.ActionData.Equals(input.ActionData))
                ) && 
                (
                    this.ActorData == input.ActorData ||
                    (this.ActorData != null &&
                    this.ActorData.Equals(input.ActorData))
                ) && 
                (
                    this.AdditionalParams == input.AdditionalParams ||
                    this.AdditionalParams != null &&
                    this.AdditionalParams.SequenceEqual(input.AdditionalParams)
                ) && 
                (
                    this.EncryptedKeywords == input.EncryptedKeywords ||
                    (this.EncryptedKeywords != null &&
                    this.EncryptedKeywords.Equals(input.EncryptedKeywords))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionData != null)
                    hashCode = hashCode * 59 + this.ActionData.GetHashCode();
                if (this.ActorData != null)
                    hashCode = hashCode * 59 + this.ActorData.GetHashCode();
                if (this.AdditionalParams != null)
                    hashCode = hashCode * 59 + this.AdditionalParams.GetHashCode();
                if (this.EncryptedKeywords != null)
                    hashCode = hashCode * 59 + this.EncryptedKeywords.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
