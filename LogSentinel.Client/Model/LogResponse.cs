/* 
 * LogSentinel RESTful API
 *
 * Read more at https://app.logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// LogResponse
    /// </summary>
    [DataContract]
    public partial class LogResponse :  IEquatable<LogResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogResponse" /> class.
        /// </summary>
        /// <param name="LastKnownHash">LastKnownHash.</param>
        /// <param name="LogEntryId">LogEntryId.</param>
        public LogResponse(string LastKnownHash = default(string), string LogEntryId = default(string))
        {
            this.LastKnownHash = LastKnownHash;
            this.LogEntryId = LogEntryId;
        }
        
        /// <summary>
        /// Gets or Sets LastKnownHash
        /// </summary>
        [DataMember(Name="lastKnownHash", EmitDefaultValue=false)]
        public string LastKnownHash { get; set; }

        /// <summary>
        /// Gets or Sets LogEntryId
        /// </summary>
        [DataMember(Name="logEntryId", EmitDefaultValue=false)]
        public string LogEntryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogResponse {\n");
            sb.Append("  LastKnownHash: ").Append(LastKnownHash).Append("\n");
            sb.Append("  LogEntryId: ").Append(LogEntryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogResponse);
        }

        /// <summary>
        /// Returns true if LogResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LogResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastKnownHash == input.LastKnownHash ||
                    (this.LastKnownHash != null &&
                    this.LastKnownHash.Equals(input.LastKnownHash))
                ) && 
                (
                    this.LogEntryId == input.LogEntryId ||
                    (this.LogEntryId != null &&
                    this.LogEntryId.Equals(input.LogEntryId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastKnownHash != null)
                    hashCode = hashCode * 59 + this.LastKnownHash.GetHashCode();
                if (this.LogEntryId != null)
                    hashCode = hashCode * 59 + this.LogEntryId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
