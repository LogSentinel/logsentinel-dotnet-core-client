/* 
 * LogSentinel RESTful API
 *
 * Read more at https://app.logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LogSentinel.Client.SwaggerDateConverter;

namespace LogSentinel.Client.Model
{
    /// <summary>
    /// GDPRRegisterRecord
    /// </summary>
    [DataContract]
    public partial class GDPRRegisterRecord :  IEquatable<GDPRRegisterRecord>, IValidatableObject
    {
        /// <summary>
        /// Defines DataRecipientCategories
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataRecipientCategoriesEnum
        {
            
            /// <summary>
            /// Enum STAFF for value: STAFF
            /// </summary>
            [EnumMember(Value = "STAFF")]
            STAFF = 1,
            
            /// <summary>
            /// Enum PUBLICAUTHORITY for value: PUBLIC_AUTHORITY
            /// </summary>
            [EnumMember(Value = "PUBLIC_AUTHORITY")]
            PUBLICAUTHORITY = 2,
            
            /// <summary>
            /// Enum CONTRACTOR for value: CONTRACTOR
            /// </summary>
            [EnumMember(Value = "CONTRACTOR")]
            CONTRACTOR = 3,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4
        }


        /// <summary>
        /// Gets or Sets DataRecipientCategories
        /// </summary>
        [DataMember(Name="dataRecipientCategories", EmitDefaultValue=false)]
        public List<DataRecipientCategoriesEnum> DataRecipientCategories { get; set; }
        /// <summary>
        /// Defines DataSubjectCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataSubjectCategoryEnum
        {
            
            /// <summary>
            /// Enum EMPLOYEES for value: EMPLOYEES
            /// </summary>
            [EnumMember(Value = "EMPLOYEES")]
            EMPLOYEES = 1,
            
            /// <summary>
            /// Enum JOBCANDIDATES for value: JOB_CANDIDATES
            /// </summary>
            [EnumMember(Value = "JOB_CANDIDATES")]
            JOBCANDIDATES = 2,
            
            /// <summary>
            /// Enum CONTRACTORS for value: CONTRACTORS
            /// </summary>
            [EnumMember(Value = "CONTRACTORS")]
            CONTRACTORS = 3,
            
            /// <summary>
            /// Enum CUSTOMERS for value: CUSTOMERS
            /// </summary>
            [EnumMember(Value = "CUSTOMERS")]
            CUSTOMERS = 4,
            
            /// <summary>
            /// Enum USERS for value: USERS
            /// </summary>
            [EnumMember(Value = "USERS")]
            USERS = 5,
            
            /// <summary>
            /// Enum SUPPLIERS for value: SUPPLIERS
            /// </summary>
            [EnumMember(Value = "SUPPLIERS")]
            SUPPLIERS = 6,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7
        }

        /// <summary>
        /// Gets or Sets DataSubjectCategory
        /// </summary>
        [DataMember(Name="dataSubjectCategory", EmitDefaultValue=false)]
        public DataSubjectCategoryEnum? DataSubjectCategory { get; set; }
        /// <summary>
        /// Defines OrganizationRole
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrganizationRoleEnum
        {
            
            /// <summary>
            /// Enum CONTROLLER for value: CONTROLLER
            /// </summary>
            [EnumMember(Value = "CONTROLLER")]
            CONTROLLER = 1,
            
            /// <summary>
            /// Enum PROCESSOR for value: PROCESSOR
            /// </summary>
            [EnumMember(Value = "PROCESSOR")]
            PROCESSOR = 2
        }

        /// <summary>
        /// Gets or Sets OrganizationRole
        /// </summary>
        [DataMember(Name="organizationRole", EmitDefaultValue=false)]
        public OrganizationRoleEnum? OrganizationRole { get; set; }
        /// <summary>
        /// Defines PersonalDataCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PersonalDataCategoryEnum
        {
            
            /// <summary>
            /// Enum EMPLOYEEDATA for value: EMPLOYEE_DATA
            /// </summary>
            [EnumMember(Value = "EMPLOYEE_DATA")]
            EMPLOYEEDATA = 1,
            
            /// <summary>
            /// Enum CUSTOMERDATA for value: CUSTOMER_DATA
            /// </summary>
            [EnumMember(Value = "CUSTOMER_DATA")]
            CUSTOMERDATA = 2,
            
            /// <summary>
            /// Enum USERDATA for value: USER_DATA
            /// </summary>
            [EnumMember(Value = "USER_DATA")]
            USERDATA = 3,
            
            /// <summary>
            /// Enum CIVILSTATUS for value: CIVIL_STATUS
            /// </summary>
            [EnumMember(Value = "CIVIL_STATUS")]
            CIVILSTATUS = 4,
            
            /// <summary>
            /// Enum PERSONALLIFE for value: PERSONAL_LIFE
            /// </summary>
            [EnumMember(Value = "PERSONAL_LIFE")]
            PERSONALLIFE = 5,
            
            /// <summary>
            /// Enum FINANCIALDATA for value: FINANCIAL_DATA
            /// </summary>
            [EnumMember(Value = "FINANCIAL_DATA")]
            FINANCIALDATA = 6,
            
            /// <summary>
            /// Enum LOCATIONDATA for value: LOCATION_DATA
            /// </summary>
            [EnumMember(Value = "LOCATION_DATA")]
            LOCATIONDATA = 7,
            
            /// <summary>
            /// Enum SENSITIVEDATA for value: SENSITIVE_DATA
            /// </summary>
            [EnumMember(Value = "SENSITIVE_DATA")]
            SENSITIVEDATA = 8,
            
            /// <summary>
            /// Enum CONTACTDATA for value: CONTACT_DATA
            /// </summary>
            [EnumMember(Value = "CONTACT_DATA")]
            CONTACTDATA = 9,
            
            /// <summary>
            /// Enum IDENTIFICATIONDATA for value: IDENTIFICATION_DATA
            /// </summary>
            [EnumMember(Value = "IDENTIFICATION_DATA")]
            IDENTIFICATIONDATA = 10,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 11
        }

        /// <summary>
        /// Gets or Sets PersonalDataCategory
        /// </summary>
        [DataMember(Name="personalDataCategory", EmitDefaultValue=false)]
        public PersonalDataCategoryEnum? PersonalDataCategory { get; set; }
        /// <summary>
        /// Defines ProcessingLegalBasis
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingLegalBasisEnum
        {
            
            /// <summary>
            /// Enum LEGITIMATEINTEREST for value: LEGITIMATE_INTEREST
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST")]
            LEGITIMATEINTEREST = 1,
            
            /// <summary>
            /// Enum CONSENT for value: CONSENT
            /// </summary>
            [EnumMember(Value = "CONSENT")]
            CONSENT = 2,
            
            /// <summary>
            /// Enum CONTRACTENFORCEMENT for value: CONTRACT_ENFORCEMENT
            /// </summary>
            [EnumMember(Value = "CONTRACT_ENFORCEMENT")]
            CONTRACTENFORCEMENT = 3,
            
            /// <summary>
            /// Enum LEGALCOMPLIANCE for value: LEGAL_COMPLIANCE
            /// </summary>
            [EnumMember(Value = "LEGAL_COMPLIANCE")]
            LEGALCOMPLIANCE = 4,
            
            /// <summary>
            /// Enum VITALINTERESTSPROTECTION for value: VITAL_INTERESTS_PROTECTION
            /// </summary>
            [EnumMember(Value = "VITAL_INTERESTS_PROTECTION")]
            VITALINTERESTSPROTECTION = 5,
            
            /// <summary>
            /// Enum PUBLICINTEREST for value: PUBLIC_INTEREST
            /// </summary>
            [EnumMember(Value = "PUBLIC_INTEREST")]
            PUBLICINTEREST = 6
        }

        /// <summary>
        /// Gets or Sets ProcessingLegalBasis
        /// </summary>
        [DataMember(Name="processingLegalBasis", EmitDefaultValue=false)]
        public ProcessingLegalBasisEnum? ProcessingLegalBasis { get; set; }
        /// <summary>
        /// Defines SensitivePersonalDataCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SensitivePersonalDataCategoryEnum
        {
            
            /// <summary>
            /// Enum RACIALORETHNIC for value: RACIAL_OR_ETHNIC
            /// </summary>
            [EnumMember(Value = "RACIAL_OR_ETHNIC")]
            RACIALORETHNIC = 1,
            
            /// <summary>
            /// Enum POLITICALOPINION for value: POLITICAL_OPINION
            /// </summary>
            [EnumMember(Value = "POLITICAL_OPINION")]
            POLITICALOPINION = 2,
            
            /// <summary>
            /// Enum RELIGIOUSBELIEFS for value: RELIGIOUS_BELIEFS
            /// </summary>
            [EnumMember(Value = "RELIGIOUS_BELIEFS")]
            RELIGIOUSBELIEFS = 3,
            
            /// <summary>
            /// Enum TRADEUNIONMEMBERSHIP for value: TRADE_UNION_MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "TRADE_UNION_MEMBERSHIP")]
            TRADEUNIONMEMBERSHIP = 4,
            
            /// <summary>
            /// Enum GENETICDATA for value: GENETIC_DATA
            /// </summary>
            [EnumMember(Value = "GENETIC_DATA")]
            GENETICDATA = 5,
            
            /// <summary>
            /// Enum BIOMETRICDATA for value: BIOMETRIC_DATA
            /// </summary>
            [EnumMember(Value = "BIOMETRIC_DATA")]
            BIOMETRICDATA = 6,
            
            /// <summary>
            /// Enum HEALTHDATA for value: HEALTH_DATA
            /// </summary>
            [EnumMember(Value = "HEALTH_DATA")]
            HEALTHDATA = 7,
            
            /// <summary>
            /// Enum SEXLIFEDATA for value: SEX_LIFE_DATA
            /// </summary>
            [EnumMember(Value = "SEX_LIFE_DATA")]
            SEXLIFEDATA = 8,
            
            /// <summary>
            /// Enum CRIMINALCONVICTIONDATA for value: CRIMINAL_CONVICTION_DATA
            /// </summary>
            [EnumMember(Value = "CRIMINAL_CONVICTION_DATA")]
            CRIMINALCONVICTIONDATA = 9,
            
            /// <summary>
            /// Enum MULTIPLE for value: MULTIPLE
            /// </summary>
            [EnumMember(Value = "MULTIPLE")]
            MULTIPLE = 10
        }

        /// <summary>
        /// Gets or Sets SensitivePersonalDataCategory
        /// </summary>
        [DataMember(Name="sensitivePersonalDataCategory", EmitDefaultValue=false)]
        public SensitivePersonalDataCategoryEnum? SensitivePersonalDataCategory { get; set; }
        /// <summary>
        /// Defines TechnicalMeasures
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TechnicalMeasuresEnum
        {
            
            /// <summary>
            /// Enum PSEUDONYMIZATION for value: PSEUDONYMIZATION
            /// </summary>
            [EnumMember(Value = "PSEUDONYMIZATION")]
            PSEUDONYMIZATION = 1,
            
            /// <summary>
            /// Enum ENCRYPTIONATREST for value: ENCRYPTION_AT_REST
            /// </summary>
            [EnumMember(Value = "ENCRYPTION_AT_REST")]
            ENCRYPTIONATREST = 2,
            
            /// <summary>
            /// Enum ENCRYPTIONINTRANSIT for value: ENCRYPTION_IN_TRANSIT
            /// </summary>
            [EnumMember(Value = "ENCRYPTION_IN_TRANSIT")]
            ENCRYPTIONINTRANSIT = 3,
            
            /// <summary>
            /// Enum AUDITINGACCESS for value: AUDITING_ACCESS
            /// </summary>
            [EnumMember(Value = "AUDITING_ACCESS")]
            AUDITINGACCESS = 4,
            
            /// <summary>
            /// Enum DATAINTEGRITYPROTECTION for value: DATA_INTEGRITY_PROTECTION
            /// </summary>
            [EnumMember(Value = "DATA_INTEGRITY_PROTECTION")]
            DATAINTEGRITYPROTECTION = 5,
            
            /// <summary>
            /// Enum SOFTWAREUPDATEPOLICY for value: SOFTWARE_UPDATE_POLICY
            /// </summary>
            [EnumMember(Value = "SOFTWARE_UPDATE_POLICY")]
            SOFTWAREUPDATEPOLICY = 6,
            
            /// <summary>
            /// Enum DATAREDUNDANCY for value: DATA_REDUNDANCY
            /// </summary>
            [EnumMember(Value = "DATA_REDUNDANCY")]
            DATAREDUNDANCY = 7
        }


        /// <summary>
        /// Gets or Sets TechnicalMeasures
        /// </summary>
        [DataMember(Name="technicalMeasures", EmitDefaultValue=false)]
        public List<TechnicalMeasuresEnum> TechnicalMeasures { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GDPRRegisterRecord" /> class.
        /// </summary>
        /// <param name="AuditTrailCorrelationKey">AuditTrailCorrelationKey.</param>
        /// <param name="Branch">Branch.</param>
        /// <param name="ControllerId">ControllerId.</param>
        /// <param name="ControllersDescription">ControllersDescription.</param>
        /// <param name="Created">Created.</param>
        /// <param name="DataRecipientCategories">DataRecipientCategories.</param>
        /// <param name="DataRecipientCategoriesOther">DataRecipientCategoriesOther.</param>
        /// <param name="DataSubjectCategory">DataSubjectCategory.</param>
        /// <param name="DataSubjectCategoryOther">DataSubjectCategoryOther.</param>
        /// <param name="Deleted">Deleted.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Id">Id.</param>
        /// <param name="JointControllerIds">JointControllerIds.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="OrganizationRole">OrganizationRole.</param>
        /// <param name="PersonalDataCategory">PersonalDataCategory.</param>
        /// <param name="PersonalDataCategoryOther">PersonalDataCategoryOther.</param>
        /// <param name="PersonalDataFields">PersonalDataFields.</param>
        /// <param name="ProcessOwner">ProcessOwner.</param>
        /// <param name="ProcessingActivityCode">ProcessingActivityCode.</param>
        /// <param name="ProcessingActivityName">ProcessingActivityName.</param>
        /// <param name="ProcessingContract">ProcessingContract.</param>
        /// <param name="ProcessingLegalBasis">ProcessingLegalBasis.</param>
        /// <param name="ProcessorId">ProcessorId.</param>
        /// <param name="Purposes">Purposes.</param>
        /// <param name="Recipients">Recipients.</param>
        /// <param name="RelevantDepartment">RelevantDepartment.</param>
        /// <param name="RetentionMonths">RetentionMonths.</param>
        /// <param name="RiskDescription">RiskDescription.</param>
        /// <param name="SensitivePersonalDataCategory">SensitivePersonalDataCategory.</param>
        /// <param name="Software">Software.</param>
        /// <param name="SubProcessorIds">SubProcessorIds.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="TechnicalMeasures">TechnicalMeasures.</param>
        /// <param name="TechnicalMeasuresOther">TechnicalMeasuresOther.</param>
        /// <param name="ThirdCountryTransferSafeguards">ThirdCountryTransferSafeguards.</param>
        /// <param name="ThirdCountryTransfers">ThirdCountryTransfers.</param>
        /// <param name="Updated">Updated.</param>
        public GDPRRegisterRecord(string AuditTrailCorrelationKey = default(string), string Branch = default(string), string ControllerId = default(string), string ControllersDescription = default(string), DateTime? Created = default(DateTime?), List<DataRecipientCategoriesEnum> DataRecipientCategories = default(List<DataRecipientCategoriesEnum>), List<string> DataRecipientCategoriesOther = default(List<string>), DataSubjectCategoryEnum? DataSubjectCategory = default(DataSubjectCategoryEnum?), string DataSubjectCategoryOther = default(string), bool? Deleted = default(bool?), string Description = default(string), string Id = default(string), List<string> JointControllerIds = default(List<string>), string Notes = default(string), string OrganizationId = default(string), OrganizationRoleEnum? OrganizationRole = default(OrganizationRoleEnum?), PersonalDataCategoryEnum? PersonalDataCategory = default(PersonalDataCategoryEnum?), string PersonalDataCategoryOther = default(string), string PersonalDataFields = default(string), string ProcessOwner = default(string), string ProcessingActivityCode = default(string), string ProcessingActivityName = default(string), List<byte[]> ProcessingContract = default(List<byte[]>), ProcessingLegalBasisEnum? ProcessingLegalBasis = default(ProcessingLegalBasisEnum?), string ProcessorId = default(string), List<string> Purposes = default(List<string>), List<GDPRRecipient> Recipients = default(List<GDPRRecipient>), string RelevantDepartment = default(string), int? RetentionMonths = default(int?), string RiskDescription = default(string), SensitivePersonalDataCategoryEnum? SensitivePersonalDataCategory = default(SensitivePersonalDataCategoryEnum?), string Software = default(string), List<string> SubProcessorIds = default(List<string>), List<string> Tags = default(List<string>), List<TechnicalMeasuresEnum> TechnicalMeasures = default(List<TechnicalMeasuresEnum>), List<string> TechnicalMeasuresOther = default(List<string>), List<string> ThirdCountryTransferSafeguards = default(List<string>), List<string> ThirdCountryTransfers = default(List<string>), DateTime? Updated = default(DateTime?))
        {
            this.AuditTrailCorrelationKey = AuditTrailCorrelationKey;
            this.Branch = Branch;
            this.ControllerId = ControllerId;
            this.ControllersDescription = ControllersDescription;
            this.Created = Created;
            this.DataRecipientCategories = DataRecipientCategories;
            this.DataRecipientCategoriesOther = DataRecipientCategoriesOther;
            this.DataSubjectCategory = DataSubjectCategory;
            this.DataSubjectCategoryOther = DataSubjectCategoryOther;
            this.Deleted = Deleted;
            this.Description = Description;
            this.Id = Id;
            this.JointControllerIds = JointControllerIds;
            this.Notes = Notes;
            this.OrganizationId = OrganizationId;
            this.OrganizationRole = OrganizationRole;
            this.PersonalDataCategory = PersonalDataCategory;
            this.PersonalDataCategoryOther = PersonalDataCategoryOther;
            this.PersonalDataFields = PersonalDataFields;
            this.ProcessOwner = ProcessOwner;
            this.ProcessingActivityCode = ProcessingActivityCode;
            this.ProcessingActivityName = ProcessingActivityName;
            this.ProcessingContract = ProcessingContract;
            this.ProcessingLegalBasis = ProcessingLegalBasis;
            this.ProcessorId = ProcessorId;
            this.Purposes = Purposes;
            this.Recipients = Recipients;
            this.RelevantDepartment = RelevantDepartment;
            this.RetentionMonths = RetentionMonths;
            this.RiskDescription = RiskDescription;
            this.SensitivePersonalDataCategory = SensitivePersonalDataCategory;
            this.Software = Software;
            this.SubProcessorIds = SubProcessorIds;
            this.Tags = Tags;
            this.TechnicalMeasures = TechnicalMeasures;
            this.TechnicalMeasuresOther = TechnicalMeasuresOther;
            this.ThirdCountryTransferSafeguards = ThirdCountryTransferSafeguards;
            this.ThirdCountryTransfers = ThirdCountryTransfers;
            this.Updated = Updated;
        }
        
        /// <summary>
        /// Gets or Sets AuditTrailCorrelationKey
        /// </summary>
        [DataMember(Name="auditTrailCorrelationKey", EmitDefaultValue=false)]
        public string AuditTrailCorrelationKey { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets ControllerId
        /// </summary>
        [DataMember(Name="controllerId", EmitDefaultValue=false)]
        public string ControllerId { get; set; }

        /// <summary>
        /// Gets or Sets ControllersDescription
        /// </summary>
        [DataMember(Name="controllersDescription", EmitDefaultValue=false)]
        public string ControllersDescription { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }


        /// <summary>
        /// Gets or Sets DataRecipientCategoriesOther
        /// </summary>
        [DataMember(Name="dataRecipientCategoriesOther", EmitDefaultValue=false)]
        public List<string> DataRecipientCategoriesOther { get; set; }


        /// <summary>
        /// Gets or Sets DataSubjectCategoryOther
        /// </summary>
        [DataMember(Name="dataSubjectCategoryOther", EmitDefaultValue=false)]
        public string DataSubjectCategoryOther { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets JointControllerIds
        /// </summary>
        [DataMember(Name="jointControllerIds", EmitDefaultValue=false)]
        public List<string> JointControllerIds { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }



        /// <summary>
        /// Gets or Sets PersonalDataCategoryOther
        /// </summary>
        [DataMember(Name="personalDataCategoryOther", EmitDefaultValue=false)]
        public string PersonalDataCategoryOther { get; set; }

        /// <summary>
        /// Gets or Sets PersonalDataFields
        /// </summary>
        [DataMember(Name="personalDataFields", EmitDefaultValue=false)]
        public string PersonalDataFields { get; set; }

        /// <summary>
        /// Gets or Sets ProcessOwner
        /// </summary>
        [DataMember(Name="processOwner", EmitDefaultValue=false)]
        public string ProcessOwner { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingActivityCode
        /// </summary>
        [DataMember(Name="processingActivityCode", EmitDefaultValue=false)]
        public string ProcessingActivityCode { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingActivityName
        /// </summary>
        [DataMember(Name="processingActivityName", EmitDefaultValue=false)]
        public string ProcessingActivityName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingContract
        /// </summary>
        [DataMember(Name="processingContract", EmitDefaultValue=false)]
        public List<byte[]> ProcessingContract { get; set; }


        /// <summary>
        /// Gets or Sets ProcessorId
        /// </summary>
        [DataMember(Name="processorId", EmitDefaultValue=false)]
        public string ProcessorId { get; set; }

        /// <summary>
        /// Gets or Sets Purposes
        /// </summary>
        [DataMember(Name="purposes", EmitDefaultValue=false)]
        public List<string> Purposes { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<GDPRRecipient> Recipients { get; set; }

        /// <summary>
        /// Gets or Sets RelevantDepartment
        /// </summary>
        [DataMember(Name="relevantDepartment", EmitDefaultValue=false)]
        public string RelevantDepartment { get; set; }

        /// <summary>
        /// Gets or Sets RetentionMonths
        /// </summary>
        [DataMember(Name="retentionMonths", EmitDefaultValue=false)]
        public int? RetentionMonths { get; set; }

        /// <summary>
        /// Gets or Sets RiskDescription
        /// </summary>
        [DataMember(Name="riskDescription", EmitDefaultValue=false)]
        public string RiskDescription { get; set; }


        /// <summary>
        /// Gets or Sets Software
        /// </summary>
        [DataMember(Name="software", EmitDefaultValue=false)]
        public string Software { get; set; }

        /// <summary>
        /// Gets or Sets SubProcessorIds
        /// </summary>
        [DataMember(Name="subProcessorIds", EmitDefaultValue=false)]
        public List<string> SubProcessorIds { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }


        /// <summary>
        /// Gets or Sets TechnicalMeasuresOther
        /// </summary>
        [DataMember(Name="technicalMeasuresOther", EmitDefaultValue=false)]
        public List<string> TechnicalMeasuresOther { get; set; }

        /// <summary>
        /// Gets or Sets ThirdCountryTransferSafeguards
        /// </summary>
        [DataMember(Name="thirdCountryTransferSafeguards", EmitDefaultValue=false)]
        public List<string> ThirdCountryTransferSafeguards { get; set; }

        /// <summary>
        /// Gets or Sets ThirdCountryTransfers
        /// </summary>
        [DataMember(Name="thirdCountryTransfers", EmitDefaultValue=false)]
        public List<string> ThirdCountryTransfers { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GDPRRegisterRecord {\n");
            sb.Append("  AuditTrailCorrelationKey: ").Append(AuditTrailCorrelationKey).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ControllerId: ").Append(ControllerId).Append("\n");
            sb.Append("  ControllersDescription: ").Append(ControllersDescription).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DataRecipientCategories: ").Append(DataRecipientCategories).Append("\n");
            sb.Append("  DataRecipientCategoriesOther: ").Append(DataRecipientCategoriesOther).Append("\n");
            sb.Append("  DataSubjectCategory: ").Append(DataSubjectCategory).Append("\n");
            sb.Append("  DataSubjectCategoryOther: ").Append(DataSubjectCategoryOther).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JointControllerIds: ").Append(JointControllerIds).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OrganizationRole: ").Append(OrganizationRole).Append("\n");
            sb.Append("  PersonalDataCategory: ").Append(PersonalDataCategory).Append("\n");
            sb.Append("  PersonalDataCategoryOther: ").Append(PersonalDataCategoryOther).Append("\n");
            sb.Append("  PersonalDataFields: ").Append(PersonalDataFields).Append("\n");
            sb.Append("  ProcessOwner: ").Append(ProcessOwner).Append("\n");
            sb.Append("  ProcessingActivityCode: ").Append(ProcessingActivityCode).Append("\n");
            sb.Append("  ProcessingActivityName: ").Append(ProcessingActivityName).Append("\n");
            sb.Append("  ProcessingContract: ").Append(ProcessingContract).Append("\n");
            sb.Append("  ProcessingLegalBasis: ").Append(ProcessingLegalBasis).Append("\n");
            sb.Append("  ProcessorId: ").Append(ProcessorId).Append("\n");
            sb.Append("  Purposes: ").Append(Purposes).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  RelevantDepartment: ").Append(RelevantDepartment).Append("\n");
            sb.Append("  RetentionMonths: ").Append(RetentionMonths).Append("\n");
            sb.Append("  RiskDescription: ").Append(RiskDescription).Append("\n");
            sb.Append("  SensitivePersonalDataCategory: ").Append(SensitivePersonalDataCategory).Append("\n");
            sb.Append("  Software: ").Append(Software).Append("\n");
            sb.Append("  SubProcessorIds: ").Append(SubProcessorIds).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TechnicalMeasures: ").Append(TechnicalMeasures).Append("\n");
            sb.Append("  TechnicalMeasuresOther: ").Append(TechnicalMeasuresOther).Append("\n");
            sb.Append("  ThirdCountryTransferSafeguards: ").Append(ThirdCountryTransferSafeguards).Append("\n");
            sb.Append("  ThirdCountryTransfers: ").Append(ThirdCountryTransfers).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GDPRRegisterRecord);
        }

        /// <summary>
        /// Returns true if GDPRRegisterRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of GDPRRegisterRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GDPRRegisterRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuditTrailCorrelationKey == input.AuditTrailCorrelationKey ||
                    (this.AuditTrailCorrelationKey != null &&
                    this.AuditTrailCorrelationKey.Equals(input.AuditTrailCorrelationKey))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.ControllerId == input.ControllerId ||
                    (this.ControllerId != null &&
                    this.ControllerId.Equals(input.ControllerId))
                ) && 
                (
                    this.ControllersDescription == input.ControllersDescription ||
                    (this.ControllersDescription != null &&
                    this.ControllersDescription.Equals(input.ControllersDescription))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DataRecipientCategories == input.DataRecipientCategories ||
                    this.DataRecipientCategories != null &&
                    this.DataRecipientCategories.SequenceEqual(input.DataRecipientCategories)
                ) && 
                (
                    this.DataRecipientCategoriesOther == input.DataRecipientCategoriesOther ||
                    this.DataRecipientCategoriesOther != null &&
                    this.DataRecipientCategoriesOther.SequenceEqual(input.DataRecipientCategoriesOther)
                ) && 
                (
                    this.DataSubjectCategory == input.DataSubjectCategory ||
                    (this.DataSubjectCategory != null &&
                    this.DataSubjectCategory.Equals(input.DataSubjectCategory))
                ) && 
                (
                    this.DataSubjectCategoryOther == input.DataSubjectCategoryOther ||
                    (this.DataSubjectCategoryOther != null &&
                    this.DataSubjectCategoryOther.Equals(input.DataSubjectCategoryOther))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.JointControllerIds == input.JointControllerIds ||
                    this.JointControllerIds != null &&
                    this.JointControllerIds.SequenceEqual(input.JointControllerIds)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OrganizationRole == input.OrganizationRole ||
                    (this.OrganizationRole != null &&
                    this.OrganizationRole.Equals(input.OrganizationRole))
                ) && 
                (
                    this.PersonalDataCategory == input.PersonalDataCategory ||
                    (this.PersonalDataCategory != null &&
                    this.PersonalDataCategory.Equals(input.PersonalDataCategory))
                ) && 
                (
                    this.PersonalDataCategoryOther == input.PersonalDataCategoryOther ||
                    (this.PersonalDataCategoryOther != null &&
                    this.PersonalDataCategoryOther.Equals(input.PersonalDataCategoryOther))
                ) && 
                (
                    this.PersonalDataFields == input.PersonalDataFields ||
                    (this.PersonalDataFields != null &&
                    this.PersonalDataFields.Equals(input.PersonalDataFields))
                ) && 
                (
                    this.ProcessOwner == input.ProcessOwner ||
                    (this.ProcessOwner != null &&
                    this.ProcessOwner.Equals(input.ProcessOwner))
                ) && 
                (
                    this.ProcessingActivityCode == input.ProcessingActivityCode ||
                    (this.ProcessingActivityCode != null &&
                    this.ProcessingActivityCode.Equals(input.ProcessingActivityCode))
                ) && 
                (
                    this.ProcessingActivityName == input.ProcessingActivityName ||
                    (this.ProcessingActivityName != null &&
                    this.ProcessingActivityName.Equals(input.ProcessingActivityName))
                ) && 
                (
                    this.ProcessingContract == input.ProcessingContract ||
                    this.ProcessingContract != null &&
                    this.ProcessingContract.SequenceEqual(input.ProcessingContract)
                ) && 
                (
                    this.ProcessingLegalBasis == input.ProcessingLegalBasis ||
                    (this.ProcessingLegalBasis != null &&
                    this.ProcessingLegalBasis.Equals(input.ProcessingLegalBasis))
                ) && 
                (
                    this.ProcessorId == input.ProcessorId ||
                    (this.ProcessorId != null &&
                    this.ProcessorId.Equals(input.ProcessorId))
                ) && 
                (
                    this.Purposes == input.Purposes ||
                    this.Purposes != null &&
                    this.Purposes.SequenceEqual(input.Purposes)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.RelevantDepartment == input.RelevantDepartment ||
                    (this.RelevantDepartment != null &&
                    this.RelevantDepartment.Equals(input.RelevantDepartment))
                ) && 
                (
                    this.RetentionMonths == input.RetentionMonths ||
                    (this.RetentionMonths != null &&
                    this.RetentionMonths.Equals(input.RetentionMonths))
                ) && 
                (
                    this.RiskDescription == input.RiskDescription ||
                    (this.RiskDescription != null &&
                    this.RiskDescription.Equals(input.RiskDescription))
                ) && 
                (
                    this.SensitivePersonalDataCategory == input.SensitivePersonalDataCategory ||
                    (this.SensitivePersonalDataCategory != null &&
                    this.SensitivePersonalDataCategory.Equals(input.SensitivePersonalDataCategory))
                ) && 
                (
                    this.Software == input.Software ||
                    (this.Software != null &&
                    this.Software.Equals(input.Software))
                ) && 
                (
                    this.SubProcessorIds == input.SubProcessorIds ||
                    this.SubProcessorIds != null &&
                    this.SubProcessorIds.SequenceEqual(input.SubProcessorIds)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TechnicalMeasures == input.TechnicalMeasures ||
                    this.TechnicalMeasures != null &&
                    this.TechnicalMeasures.SequenceEqual(input.TechnicalMeasures)
                ) && 
                (
                    this.TechnicalMeasuresOther == input.TechnicalMeasuresOther ||
                    this.TechnicalMeasuresOther != null &&
                    this.TechnicalMeasuresOther.SequenceEqual(input.TechnicalMeasuresOther)
                ) && 
                (
                    this.ThirdCountryTransferSafeguards == input.ThirdCountryTransferSafeguards ||
                    this.ThirdCountryTransferSafeguards != null &&
                    this.ThirdCountryTransferSafeguards.SequenceEqual(input.ThirdCountryTransferSafeguards)
                ) && 
                (
                    this.ThirdCountryTransfers == input.ThirdCountryTransfers ||
                    this.ThirdCountryTransfers != null &&
                    this.ThirdCountryTransfers.SequenceEqual(input.ThirdCountryTransfers)
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuditTrailCorrelationKey != null)
                    hashCode = hashCode * 59 + this.AuditTrailCorrelationKey.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ControllerId != null)
                    hashCode = hashCode * 59 + this.ControllerId.GetHashCode();
                if (this.ControllersDescription != null)
                    hashCode = hashCode * 59 + this.ControllersDescription.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DataRecipientCategories != null)
                    hashCode = hashCode * 59 + this.DataRecipientCategories.GetHashCode();
                if (this.DataRecipientCategoriesOther != null)
                    hashCode = hashCode * 59 + this.DataRecipientCategoriesOther.GetHashCode();
                if (this.DataSubjectCategory != null)
                    hashCode = hashCode * 59 + this.DataSubjectCategory.GetHashCode();
                if (this.DataSubjectCategoryOther != null)
                    hashCode = hashCode * 59 + this.DataSubjectCategoryOther.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.JointControllerIds != null)
                    hashCode = hashCode * 59 + this.JointControllerIds.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.OrganizationRole != null)
                    hashCode = hashCode * 59 + this.OrganizationRole.GetHashCode();
                if (this.PersonalDataCategory != null)
                    hashCode = hashCode * 59 + this.PersonalDataCategory.GetHashCode();
                if (this.PersonalDataCategoryOther != null)
                    hashCode = hashCode * 59 + this.PersonalDataCategoryOther.GetHashCode();
                if (this.PersonalDataFields != null)
                    hashCode = hashCode * 59 + this.PersonalDataFields.GetHashCode();
                if (this.ProcessOwner != null)
                    hashCode = hashCode * 59 + this.ProcessOwner.GetHashCode();
                if (this.ProcessingActivityCode != null)
                    hashCode = hashCode * 59 + this.ProcessingActivityCode.GetHashCode();
                if (this.ProcessingActivityName != null)
                    hashCode = hashCode * 59 + this.ProcessingActivityName.GetHashCode();
                if (this.ProcessingContract != null)
                    hashCode = hashCode * 59 + this.ProcessingContract.GetHashCode();
                if (this.ProcessingLegalBasis != null)
                    hashCode = hashCode * 59 + this.ProcessingLegalBasis.GetHashCode();
                if (this.ProcessorId != null)
                    hashCode = hashCode * 59 + this.ProcessorId.GetHashCode();
                if (this.Purposes != null)
                    hashCode = hashCode * 59 + this.Purposes.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.RelevantDepartment != null)
                    hashCode = hashCode * 59 + this.RelevantDepartment.GetHashCode();
                if (this.RetentionMonths != null)
                    hashCode = hashCode * 59 + this.RetentionMonths.GetHashCode();
                if (this.RiskDescription != null)
                    hashCode = hashCode * 59 + this.RiskDescription.GetHashCode();
                if (this.SensitivePersonalDataCategory != null)
                    hashCode = hashCode * 59 + this.SensitivePersonalDataCategory.GetHashCode();
                if (this.Software != null)
                    hashCode = hashCode * 59 + this.Software.GetHashCode();
                if (this.SubProcessorIds != null)
                    hashCode = hashCode * 59 + this.SubProcessorIds.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TechnicalMeasures != null)
                    hashCode = hashCode * 59 + this.TechnicalMeasures.GetHashCode();
                if (this.TechnicalMeasuresOther != null)
                    hashCode = hashCode * 59 + this.TechnicalMeasuresOther.GetHashCode();
                if (this.ThirdCountryTransferSafeguards != null)
                    hashCode = hashCode * 59 + this.ThirdCountryTransferSafeguards.GetHashCode();
                if (this.ThirdCountryTransfers != null)
                    hashCode = hashCode * 59 + this.ThirdCountryTransfers.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
